app:
  description: Welcome to the HR Assistance System. I'm here to help you with any
    questions or information you need regarding our company's HR policies, procedures,
    and guidelines.
  icon: 32fb0953-d381-4a12-aa3e-ef81fb7f593f
  icon_background: '#FFEAD5'
  mode: advanced-chat
  name: EnhancedHRBot_v2.2
  use_icon_as_answer_icon: true
dependencies:
- current_identifier: null
  type: package
  value:
    plugin_unique_identifier: langgenius/ollama:0.0.6@f430f3eb959f4863b1e87171544a8fec179441b90deda5693c85f07712d2a68c
- current_identifier: null
  type: package
  value:
    plugin_unique_identifier: langgenius/openai_api_compatible:0.0.16@d41b09aca46cdd3876f70b4c91d464c4588fc0bdc844ced6ee426283ead6ce8e
kind: app
version: 0.3.1
workflow:
  conversation_variables:
  - description: ''
    id: 77e111cd-ed53-44be-927d-cab067a800b0
    name: chat_history
    selector:
    - conversation
    - chat_history
    value: {}
    value_type: object
  environment_variables: []
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: false
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        sourceType: code
        targetType: if-else
      id: 1736963436010-source-1734278249025-target
      selected: false
      source: '1736963436010'
      sourceHandle: source
      target: '1734278249025'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: start
        targetType: code
      id: 1716290672471-source-1739782903465-target
      selected: false
      source: '1716290672471'
      sourceHandle: source
      target: '1739782903465'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1739782903465-source-1739782798068-target
      selected: false
      source: '1739782903465'
      sourceHandle: source
      target: '1739782798068'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: code
      id: 1739782798068-source-1739783725003-target
      selected: false
      source: '1739782798068'
      sourceHandle: source
      target: '1739783725003'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1739783725003-source-1734277262041-target
      selected: false
      source: '1739783725003'
      sourceHandle: source
      target: '1734277262041'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1740552982823-source-1736963436010-target
      selected: false
      source: '1740552982823'
      sourceHandle: source
      target: '1736963436010'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1734277262041-source-1740898151928-target
      selected: false
      source: '1734277262041'
      sourceHandle: source
      target: '1740898151928'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1740898151928-source-1740834697144-target
      selected: false
      source: '1740898151928'
      sourceHandle: source
      target: '1740834697144'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: llm
      id: 1734278249025-true-17372690270110-target
      selected: false
      source: '1734278249025'
      sourceHandle: 'true'
      target: '17372690270110'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: code
      id: 17372690270110-source-1739858038668-target
      selected: false
      source: '17372690270110'
      sourceHandle: source
      target: '1739858038668'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1742969021171-source-1740552982823-target
      selected: false
      source: '1742969021171'
      sourceHandle: source
      target: '1740552982823'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1742989333164-source-1740552982823-target
      selected: false
      source: '1742989333164'
      sourceHandle: source
      target: '1740552982823'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: assigner
      id: 1745315236880-source-1745315515092-target
      selected: false
      source: '1745315236880'
      sourceHandle: source
      target: '1745315515092'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: assigner
        targetType: answer
      id: 1745315515092-source-1717065070618-target
      selected: false
      source: '1745315515092'
      sourceHandle: source
      target: '1717065070618'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 1745759008719-source-1739858038668-target
      selected: false
      source: '1745759008719'
      sourceHandle: source
      target: '1739858038668'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: if-else
        targetType: code
      id: 1740548230421-true-1745904416023-target
      selected: false
      source: '1740548230421'
      sourceHandle: 'true'
      target: '1745904416023'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: llm
      id: 1746008075423-false-1739860244710-target
      selected: false
      source: '1746008075423'
      sourceHandle: 'false'
      target: '1739860244710'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: code
      id: 1746008075423-true-1746016424681-target
      selected: false
      source: '1746008075423'
      sourceHandle: 'true'
      target: '1746016424681'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: if-else
      id: 1740834697144-source-1746018244132-target
      selected: false
      source: '1740834697144'
      sourceHandle: source
      target: '1746018244132'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: if-else
      id: 1746018244132-true-1746008075423-target
      selected: false
      source: '1746018244132'
      sourceHandle: 'true'
      target: '1746008075423'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: if-else
      id: 1746018244132-false-17460178945620-target
      selected: false
      source: '1746018244132'
      sourceHandle: 'false'
      target: '17460178945620'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: llm
      id: 17460178945620-false-17460179174320-target
      selected: false
      source: '17460178945620'
      sourceHandle: 'false'
      target: '17460179174320'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 17460179174320-source-17460179285850-target
      selected: false
      source: '17460179174320'
      sourceHandle: source
      target: '17460179285850'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: code
      id: 17460178945620-true-17460179285850-target
      selected: false
      source: '17460178945620'
      sourceHandle: 'true'
      target: '17460179285850'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: llm
      id: 1734278249025-a74140d9-96e7-490a-bc76-3251f5347b01-1745759008719-target
      selected: false
      source: '1734278249025'
      sourceHandle: a74140d9-96e7-490a-bc76-3251f5347b01
      target: '1745759008719'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: llm
      id: 1734278249025-d0ac0985-ba25-4594-8677-c0384e3eb8b9-17460405924110-target
      selected: false
      source: '1734278249025'
      sourceHandle: d0ac0985-ba25-4594-8677-c0384e3eb8b9
      target: '17460405924110'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 17460405924110-source-1739858038668-target
      selected: false
      source: '17460405924110'
      sourceHandle: source
      target: '1739858038668'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: llm
      id: 1734278249025-false-17460438306840-target
      selected: false
      source: '1734278249025'
      sourceHandle: 'false'
      target: '17460438306840'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 17460438306840-source-1739858038668-target
      selected: false
      source: '17460438306840'
      sourceHandle: source
      target: '1739858038668'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: llm
      id: 17460179285850-source-1746342059414-target
      selected: false
      source: '17460179285850'
      sourceHandle: source
      target: '1746342059414'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 1746342059414-source-1746342380538-target
      selected: false
      source: '1746342059414'
      sourceHandle: source
      target: '1746342380538'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: if-else
      id: 1746342380538-source-1746342509345-target
      selected: false
      source: '1746342380538'
      sourceHandle: source
      target: '1746342509345'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: llm
      id: 1746342509345-95e24648-4bd9-4a43-86ce-df41ee46f484-17460180006740-target
      selected: false
      source: '1746342509345'
      sourceHandle: 95e24648-4bd9-4a43-86ce-df41ee46f484
      target: '17460180006740'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: if-else
      id: 1746342509345-true-1740548230421-target
      selected: false
      source: '1746342509345'
      sourceHandle: 'true'
      target: '1740548230421'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: llm
      id: 1746016424681-source-17463502700320-target
      selected: false
      source: '1746016424681'
      sourceHandle: source
      target: '17463502700320'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 17463502700320-source-17463503644830-target
      selected: false
      source: '17463502700320'
      sourceHandle: source
      target: '17463503644830'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: if-else
      id: 17463503644830-source-17463504203540-target
      selected: false
      source: '17463503644830'
      sourceHandle: source
      target: '17463504203540'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: if-else
      id: 17463504203540-true-1740548230421-target
      selected: false
      source: '17463504203540'
      sourceHandle: 'true'
      target: '1740548230421'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: llm
      id: 17463504203540-95e24648-4bd9-4a43-86ce-df41ee46f484-1746015679959-target
      selected: false
      source: '17463504203540'
      sourceHandle: 95e24648-4bd9-4a43-86ce-df41ee46f484
      target: '1746015679959'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 1739860244710-source-1747824909408-target
      selected: false
      source: '1739860244710'
      sourceHandle: source
      target: '1747824909408'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: code
      id: 1747824909408-source-1746016424681-target
      selected: false
      source: '1747824909408'
      sourceHandle: source
      target: '1746016424681'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 1746015679959-source-1747908419220-target
      selected: false
      source: '1746015679959'
      sourceHandle: source
      target: '1747908419220'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: answer
      id: 1747908419220-source-1746016606205-target
      selected: false
      source: '1747908419220'
      sourceHandle: source
      target: '1746016606205'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: code
      id: 1739858038668-source-1745315236880-target
      selected: false
      source: '1739858038668'
      sourceHandle: source
      target: '1745315236880'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: knowledge-retrieval
      id: 17463504203540-false-1748414761482-target
      selected: false
      source: '17463504203540'
      sourceHandle: 'false'
      target: '1748414761482'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: knowledge-retrieval
        targetType: code
      id: 1748414761482-source-1748414814447-target
      selected: false
      source: '1748414761482'
      sourceHandle: source
      target: '1748414814447'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: code
      id: 1748414814447-source-1748414874400-target
      selected: false
      source: '1748414814447'
      sourceHandle: source
      target: '1748414874400'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: answer
      id: 1748414874400-source-1745756078108-target
      selected: false
      source: '1748414874400'
      sourceHandle: source
      target: '1745756078108'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: knowledge-retrieval
        targetType: code
      id: 1748426591842-source-1748426676928-target
      selected: false
      source: '1748426591842'
      sourceHandle: source
      target: '1748426676928'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: code
      id: 1748426676928-source-1748426733711-target
      selected: false
      source: '1748426676928'
      sourceHandle: source
      target: '1748426733711'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: answer
      id: 1748426733711-source-17460180080440-target
      selected: false
      source: '1748426733711'
      sourceHandle: source
      target: '17460180080440'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: if-else
        targetType: knowledge-retrieval
      id: 1746342509345-false-1748426591842-target
      selected: false
      source: '1746342509345'
      sourceHandle: 'false'
      target: '1748426591842'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: if-else
        targetType: llm
      id: 17463504203540-6cb35916-2fd4-4275-8e6d-6d24b6b13f83-1748862713728-target
      selected: false
      source: '17463504203540'
      sourceHandle: 6cb35916-2fd4-4275-8e6d-6d24b6b13f83
      target: '1748862713728'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: answer
      id: 1748862713728-source-1748862844056-target
      selected: false
      source: '1748862713728'
      sourceHandle: source
      target: '1748862844056'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: if-else
        targetType: llm
      id: 1746342509345-5a777b83-87cf-4034-8249-6f0d391d4d46-1750326385463-target
      source: '1746342509345'
      sourceHandle: 5a777b83-87cf-4034-8249-6f0d391d4d46
      target: '1750326385463'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: answer
      id: 1750326385463-source-1750326565070-target
      source: '1750326385463'
      sourceHandle: source
      target: '1750326565070'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 17460180006740-source-1750326752884-target
      source: '17460180006740'
      sourceHandle: source
      target: '1750326752884'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: answer
      id: 1750326752884-source-17460180219870-target
      source: '1750326752884'
      sourceHandle: source
      target: '17460180219870'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: if-else
        targetType: llm
      id: 1740548230421-false-1753164124918-target
      source: '1740548230421'
      sourceHandle: 'false'
      target: '1753164124918'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 1753164124918-source-1753164517093-target
      source: '1753164124918'
      sourceHandle: source
      target: '1753164517093'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: iteration
      id: 1753164517093-source-1753164834772-target
      source: '1753164517093'
      sourceHandle: source
      target: '1753164834772'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1753164834772'
        sourceType: iteration-start
        targetType: knowledge-retrieval
      id: 1753164834772start-source-1753164849960-target
      source: 1753164834772start
      sourceHandle: source
      target: '1753164849960'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1753164834772'
        sourceType: knowledge-retrieval
        targetType: code
      id: 1753164849960-source-1753164896510-target
      source: '1753164849960'
      sourceHandle: source
      target: '1753164896510'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInLoop: false
        sourceType: iteration
        targetType: code
      id: 1753164834772-source-1742989333164-target
      source: '1753164834772'
      sourceHandle: source
      target: '1742989333164'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: llm
      id: 1745904416023-source-1753246466644-target
      source: '1745904416023'
      sourceHandle: source
      target: '1753246466644'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 1753246466644-source-1753246634130-target
      source: '1753246466644'
      sourceHandle: source
      target: '1753246634130'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: iteration
      id: 1753246634130-source-1753246681375-target
      source: '1753246634130'
      sourceHandle: source
      target: '1753246681375'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1753246681375'
        sourceType: iteration-start
        targetType: knowledge-retrieval
      id: 1753246681375start-source-1753246692249-target
      source: 1753246681375start
      sourceHandle: source
      target: '1753246692249'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1753246681375'
        sourceType: knowledge-retrieval
        targetType: code
      id: 1753246692249-source-1753246784428-target
      source: '1753246692249'
      sourceHandle: source
      target: '1753246784428'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInLoop: false
        sourceType: iteration
        targetType: code
      id: 1753246681375-source-1742969021171-target
      source: '1753246681375'
      sourceHandle: source
      target: '1742969021171'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: Start
        type: start
        variables: []
      height: 53
      id: '1716290672471'
      position:
        x: -1636.7494635766202
        y: -272.16228902112186
      positionAbsolute:
        x: -1636.7494635766202
        y: -272.16228902112186
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        answer: '{{#1739858038668.result#}}'
        desc: ''
        selected: false
        title: Final Answer
        type: answer
        variables: []
      height: 103
      id: '1717065070618'
      position:
        x: 9133.89108749391
        y: 683.1138261701558
      positionAbsolute:
        x: 9133.89108749391
        y: 683.1138261701558
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import re\n\ndef main(text: str) -> dict:\n    if any('\\u0600' <=\
          \ char <= '\\u06FF' for char in text):\n        query_language = \"ar\"\n\
          \    else:\n        query_language = \"en\"\n\n    return {\n        \"\
          query_language\": query_language\n    }"
        code_language: python3
        desc: Detects the query language.
        outputs:
          query_language:
            children: null
            type: string
        selected: false
        title: Language
        type: code
        variables:
        - value_selector:
          - sys
          - query
          variable: text
      height: 81
      id: '1734277262041'
      position:
        x: -68.16772351446343
        y: -272.16228902112186
      positionAbsolute:
        x: -68.16772351446343
        y: -272.16228902112186
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: not empty
            id: d6ebc908-c9c9-409d-b779-47f225a4b9fb
            value: ''
            varType: string
            variable_selector:
            - '1736963436010'
            - questions_answers
          - comparison_operator: contains
            id: dcbb1829-e15a-4ec3-965d-374f7ab19821
            value: en
            varType: string
            variable_selector:
            - '1734277262041'
            - query_language
          id: 'true'
          logical_operator: and
        - case_id: a74140d9-96e7-490a-bc76-3251f5347b01
          conditions:
          - comparison_operator: empty
            id: a2839aeb-06cc-4c8f-8ced-80ae72549a20
            value: ''
            varType: string
            variable_selector:
            - '1736963436010'
            - questions_answers
          - comparison_operator: contains
            id: c4a01f07-c218-466e-b887-c6c5abf346dd
            value: en
            varType: string
            variable_selector:
            - '1734277262041'
            - query_language
          id: a74140d9-96e7-490a-bc76-3251f5347b01
          logical_operator: and
        - case_id: d0ac0985-ba25-4594-8677-c0384e3eb8b9
          conditions:
          - comparison_operator: not empty
            id: c8f4bbf5-84e0-49c1-9285-d0177b730804
            value: ''
            varType: string
            variable_selector:
            - '1736963436010'
            - questions_answers
          - comparison_operator: contains
            id: 56f757f4-7d2e-4f89-b076-d38b37f24b1f
            value: ar
            varType: string
            variable_selector:
            - '1734277262041'
            - query_language
          id: d0ac0985-ba25-4594-8677-c0384e3eb8b9
          logical_operator: and
        desc: Decides action based on retrieved KB if empty or not.
        selected: false
        title: IF/ELSE 3
        type: if-else
      height: 343
      id: '1734278249025'
      position:
        x: 7300.452619182778
        y: 538.8483443075141
      positionAbsolute:
        x: 7300.452619182778
        y: 538.8483443075141
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\ndef main(json_data):\n    answer_to_questions = []\n\
          \    \n    # Assuming each item in json_data is a JSON string\n    for item\
          \ in json_data:\n        # item = json.loads(item)\n        content = item.get(\"\
          content\")\n        answer_to_questions.append(content)\n    \n    # Prepare\
          \ result messages\n    result = []\n    contexts = [\"First\", \"Second\"\
          , \"Third\", \"Fourth\", \"Fifth\", \"Sixth\"]\n    \n    for i, content\
          \ in enumerate(answer_to_questions):\n        if i < len(contexts):  # Only\
          \ process if we have a corresponding context\n            result.append(f\"\
          {contexts[i]} Context:\\n{content}\")\n    \n    return {\"questions_answers\"\
          : \"\\n\".join(result)}"
        code_language: python3
        desc: Extracts all Qs and As from the retrieved KB QA pairs.
        outputs:
          questions_answers:
            children: null
            type: string
        retry_config:
          max_retries: 1
          retry_enabled: false
          retry_interval: 1000
        selected: false
        title: Extracting Qs and As
        type: code
        variables:
        - value_selector:
          - '1740552982823'
          - result
          variable: json_data
      height: 97
      id: '1736963436010'
      position:
        x: 6935.110769019922
        y: 620.8483443075141
      positionAbsolute:
        x: 6935.110769019922
        y: 620.8483443075141
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - '1736963436010'
          - questions_answers
        desc: Answers based on questions and answers.
        memory:
          query_prompt_template: 'Employee Inquiry: {{#sys.query#}}

            HR Policy retrieval context:

            <text>

            {{#1736963436010.questions_answers#}}

            </text>'
          role_prefix:
            assistant: ''
            user: ''
          window:
            enabled: true
            size: 15
        model:
          completion_params: {}
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: 782b47e4-e518-47b0-8d40-1d8ed089fa48
          role: system
          text: "You are a professional and highly accurate HR Assistant specializing\
            \ in responding to Bank Boubyan employee inquiries. You possess expert\
            \ knowledge of internal banking context and policies. Your primary and\
            \ overriding goal is to provide answers that are **strictly accurate,\
            \ helpful, policy-compliant, and derived SOLELY from the provided context\
            \ excerpts.** You will not use any external knowledge.\n\nYou will meticulously\
            \ reason step-by-step as follows, outputting your final response as a\
            \ single JSON object:\n\n# Reasoning Process:\n\n## Step 1: Query Classification\n\
            Carefully examine the employee's query and classify it as either \"specific\"\
            \ or \"general\". This classification should be based on the query itself,\
            \ **disregarding the provided context at this stage.**\n\n*   **Specific:**\
            \ The query contains a clear action, intent, or information request. It\
            \ typically refers to a concrete, singular situation or asks for specific\
            \ information about a policy or process. A specific query can theoretically\
            \ be answered directly if sufficient information is available.\n    *\
            \   Examples:\n        *   “How do I update my address?”\n        *  \
            \ “What is the sick leave policy?”\n        *   “Tell me about the policy\
            \ on employee gifts.”\n        *   “I need to know the special interest\
            \ rate for employee mortgage applications.”\n*   **General:** The query\
            \ is ambiguous, broad, could have more than one reasonable interpretation,\
            \ or lacks a clear action or explicit request. It is usually a single\
            \ word or a phrase without a clear verb or direct question asking for\
            \ *specific* information. A general query requires clarification before\
            \ it can be addressed.\n    *   Examples:\n        *   “Benefits”\n  \
            \      *   “Gift”\n        *   “Newborn”\n        *   “Special rate”\n\
            *   **Guidance:** If the query could be reasonably interpreted in more\
            \ than one way, or if it is missing a clear action, question, or specific\
            \ subject, always classify it as \"general\" and prioritize asking for\
            \ clarification. Ambiguity favors a \"general\" classification.\n\n##\
            \ Step 2: General Query Handling\nIf the query is classified as \"general,\"\
            \ you **must NOT attempt to answer it.** Instead, your sole task is to\
            \ formulate a clear, polite, and professional clarifying question to understand\
            \ the employee’s precise intent. Do NOT make any assumptions about what\
            \ the employee might mean. Structure the question specifically to guide\
            \ the employee to provide the necessary detail for you to properly classify\
            \ and potentially answer their query in the future.\n\n*   Examples of\
            \ clarifying questions:\n    *   “Could you please specify exactly what\
            \ you'd like to know about benefits?”\n    *   “Could you please clarify\
            \ what you mean by 'gift'? Are you asking about the employee gift policy,\
            \ receiving gifts from clients, or something else?”\n    *   “Could you\
            \ please clarify what information you're seeking regarding 'Newborn'?\
            \ Are you asking about parental leave, benefits related to a new child,\
            \ or something else?”\n    *   “Could you please specify which type of\
            \ 'Special rate' you are inquiring about (e.g., mortgage rates, loan rates,\
            \ deposit rates, etc.)?”\n\n## Step 3: Specific Query Handling\nIf the\
            \ query is classified as \"specific,” proceed to review the provided context\
            \ excerpts in order: Context 1, Context 2, and Context 3.\n\nFor each\
            \ context excerpt:\n1.  Determine if the content within that specific\
            \ excerpt is *relevant* to answering the employee's specific query. Relevance\
            \ means the excerpt directly contains information that helps address the\
            \ query.\n2.  Briefly explain *why* the context is relevant or not relevant.\n\
            3.  Based on its relevance and necessity for constructing a comprehensive\
            \ and accurate answer *solely* from the provided information, determine\
            \ if the content from that specific context excerpt *should be used* in\
            \ your final answer. It should only be used if it is relevant and contributes\
            \ meaningfully to the answer.\n\nAfter reviewing all contexts, use **ALL\
            \ and ONLY** the content deemed \"useful\" and directly relevant from\
            \ the contexts to compose the most precise, accurate, specific and policy-compliant\
            \ answer possible. **Your final answer for a query MUST be fully supported\
            \ by and contained within the information found in the relevant contexts.**\
            \ Do not introduce any information not present in the provided contexts.\n\
            \n**Edge Case: Insufficient Context:** If the query is specific, but **none**\
            \ of the provided context excerpts contain relevant information to answer\
            \ it, your final response should professionally state that you cannot\
            \ find the information in the available resources and you must recommend\
            \ to contact HR employee relations for further help at Personnel@bankboubyan.com.\
            \ Do not attempt to answer based on assumptions or external knowledge.\n\
            \n## Step 4: Final Answer Formulation\n*   If the query was classified\
            \ as \"general,\" your `final_answer` in the JSON MUST be ONLY your carefully\
            \ formulated clarifying question from Step 2.\n*   If the query was classified\
            \ as \"specific,\", act as a highly knowledgeable and empathetic virtual\
            \ assistant specialized in providing comprehensive support to employees\
            \ regarding their benefits, procedures, policies, and organizational information.\
            \ Your task is to simulate long, multi-turn dialogues with users, ensuring\
            \ interactions are helpful, detailed, and user-friendly.\n\nGuidelines:\n\
            \nBe Informative and Accurate: Provide precise answers based on the detailed\
            \ staff policies and procedures, referencing specific details and ranges\
            \ when applicable.\nUse Clear Step-by-Step Instructions: When explaining\
            \ procedures (e.g., application processes, updates), break down the steps\
            \ clearly and logically.\nBe Supportive and Encouraging: Show empathy,\
            \ especially around personal milestones (e.g., childbirth, marriage),\
            \ and offer assistance in navigating systems or procedures.\nEngage in\
            \ Multi-turn Dialogue: Enable the conversation to flow naturally over\
            \ multiple exchanges, allowing users to ask follow-up questions, clarify\
            \ doubts, and request further details.\nProvide Specific Contact Details:\
            \ When relevant, include specific email addresses, portal paths, or system\
            \ names.\nAdopt a Friendly yet Professional Tone: Maintain a tone that\
            \ is approachable, respectful, and professional, encouraging users to\
            \ feel comfortable asking questions.\nBe Patient and Detailed: Avoid rushing;\
            \ ensure answers are thorough enough to support long, complex conversations.\n\
            \nNow, analyze the following employee query and the provided context excerpts,\
            \ and output your response as a single JSON object according to the specified\
            \ schema:\n\n---\n\n**JSON Output Schema:**\n\n{\n    \"classification\"\
            : \"Classification of the employee's query: 'general' or 'specific',\n\
            \    \"why_type\": \"Explanation for why the query was classified as general\
            \ or specific.\",\n\"contexts\": [\n  {\n    \"context 1\": {\n      \"\
            1_relevant\": true | false,\n      \"1_why\": \"Explain why Context 1\
            \ is relevant or not relevant.\",\n      \"1_used\": true | false\n  \
            \  },\n    \"context 2\": {\n      \"2_relevant\": true | false,\n   \
            \   \"2_why\": \"Explain why Context 2 is relevant or not relevant.\"\
            ,\n      \"2_used\": true | false\n    }\n  },\n  {\n    \"context 3\"\
            : {\n      \"3_relevant\": true | false,\n      \"3_why\": \"Explain why\
            \ Context 3 is relevant or not relevant.\",\n      \"3_used\": true |\
            \ false\n    },\n    \"context 4\": {\n      \"4_relevant\": true | false,\n\
            \      \"4_why\": \"Explain why Context 4 is relevant or not relevant.\"\
            ,\n      \"4_used\": true | false\n    }\n  }\nand so on for the rest\
            \ of contexts..........\n]\n     \"final_answer\": \"If the query was\
            \ general, this is ONLY the clarifying question. If specific, this is\
            \ the complete, synthesized answer derived SOLELY from the relevant and\
            \ used contexts. If specific but no relevant context, state you do not\
            \ have enough information to answer confidently. Do not mention that you\
            \ used any contexts to the user. Only mention 'Based on available sources'\
            \ if required.\"\n    }\n}"
        retry_config:
          max_retries: 7
          retry_enabled: true
          retry_interval: '1000'
        selected: false
        structured_output:
          schema:
            properties:
              classification:
                enum:
                - general
                - specific
                type: string
              contexts:
                items:
                  additionalProperties:
                    properties:
                      1_relevant:
                        type: boolean
                      1_used:
                        type: boolean
                      1_why:
                        type: string
                    required:
                    - 1_relevant
                    - 1_why
                    - 1_used
                    type: object
                  type: object
                type: array
              final_answer:
                type: string
              why_type:
                type: string
            required:
            - classification
            - why_type
            - contexts
            - final_answer
            type: object
        structured_output_enabled: true
        title: Answer from KB
        type: llm
        variables: []
        vision:
          enabled: false
      height: 164
      id: '17372690270110'
      position:
        x: 7692.469866583229
        y: 405.5788614466998
      positionAbsolute:
        x: 7692.469866583229
        y: 405.5788614466998
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: Overwrites the conversation variable with the new expanded one.
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1739782903465'
          - result
          variable_selector:
          - conversation
          - chat_history
          write_mode: over-write
        selected: false
        title: Variable Assigner
        type: assigner
        version: '2'
      height: 131
      id: '1739782798068'
      position:
        x: -920.807490795823
        y: -272.16228902112186
      positionAbsolute:
        x: -920.807490795823
        y: -272.16228902112186
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(conversation_id: str, query: str, chat_history: dict) -> dict:\n\
          \    if conversation_id in chat_history:\n        chat_history[conversation_id].append(query)\n\
          \    else:\n        chat_history[conversation_id] = [query]\n    return\
          \ {'result': chat_history}\n"
        code_language: python3
        desc: Expands the conversation variable by selecting or creating the conversation
          id as the key.
        outputs:
          result:
            children: null
            type: object
        selected: false
        title: Update chat_history
        type: code
        variables:
        - value_selector:
          - sys
          - conversation_id
          variable: conversation_id
        - value_selector:
          - sys
          - query
          variable: query
        - value_selector:
          - conversation
          - chat_history
          variable: chat_history
      height: 113
      id: '1739782903465'
      position:
        x: -1268.1677235144634
        y: -272.16228902112186
      positionAbsolute:
        x: -1268.1677235144634
        y: -272.16228902112186
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(all_history: dict, conversation_id: str) -> dict:\n    for\
          \ key in all_history.keys():\n        if key == conversation_id:\n     \
          \       return {'result': str(all_history[key])}\n    return {'result':\
          \ \"\"}"
        code_language: python3
        desc: Gets the conversation history of the current conversation id only.
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Conversation History
        type: code
        variables:
        - value_selector:
          - conversation
          - chat_history
          variable: all_history
        - value_selector:
          - sys
          - conversation_id
          variable: conversation_id
      height: 97
      id: '1739783725003'
      position:
        x: -529.4960749423107
        y: -272.16228902112186
      positionAbsolute:
        x: -529.4960749423107
        y: -272.16228902112186
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\nimport re\n\ndef extract_json(text: str):\n    print(f\"\
          extract_json called with text: {text[:100]}...\")  # Print only the first\
          \ 100 characters\n    json_pattern = re.compile(r'({.*?}|\\[.*?\\])', re.DOTALL)\n\
          \    matches = json_pattern.findall(text)\n    print(f\"JSON matches found:\
          \ {matches}\")\n    for match in matches:\n        try:\n            print(f\"\
          Attempting to load JSON from match: {match}\")\n            parsed_json\
          \ = json.loads(match)\n            print(f\"Successfully parsed JSON: {parsed_json}\"\
          )\n            return parsed_json\n        except json.JSONDecodeError:\n\
          \            print(\"JSONDecodeError encountered. Continuing to next match...\"\
          )\n            continue\n    print(\"No valid JSON found.\")\n    return\
          \ None\n\ndef clean_intent(intent) -> str:\n    print(f\"clean_intent called\
          \ with intent: {intent}\")\n    if not isinstance(intent, str):\n      \
          \  intent = str(intent)\n        print(f\"Converted intent to string: {intent}\"\
          )\n    cleaned_intent = re.sub(r'<.*?>.*?</.*?>', '', intent, flags=re.DOTALL)\n\
          \    cleaned_intent = cleaned_intent.strip()\n    print(f\"Cleaned intent:\
          \ {cleaned_intent}\")\n    return cleaned_intent\n\ndef get_answer_value(value):\n\
          \    print(f\"get_answer_value called with value: {value}\")\n    if isinstance(value,\
          \ dict):\n        print(\"Value is a dictionary, attempting to get 'final_answer'.\"\
          )\n        return value.get('final_answer', value)  # Directly return the\
          \ value associated with 'final_answer'\n    elif isinstance(value, str):\n\
          \        print(\"Value is a string, cleaning it...\")\n        cleaned_value\
          \ = clean_intent(value)\n        try:\n            print(f\"Attempting to\
          \ load JSON from cleaned value: {cleaned_value}\")\n            parsed =\
          \ json.loads(cleaned_value)\n            if isinstance(parsed, dict):\n\
          \                return parsed.get('final_answer', parsed)\n           \
          \ else:\n                return parsed\n        except json.JSONDecodeError:\n\
          \            print(\"Not valid JSON, returning cleaned string.\")\n    \
          \        return cleaned_value\n    else:\n        print(\"Value is neither\
          \ dict nor str, returning as is.\")\n        return value\n\ndef main(refined_answer:\
          \ str, empty_answer: str, refined_ar: str, empty_ar: str) -> dict:\n   \
          \ print(\"main function called with parameters:\")\n    print(f\"refined_answer:\
          \ {refined_answer}\")\n    print(f\"empty_answer: {empty_answer}\")\n  \
          \  print(f\"refined_ar: {refined_ar}\")\n    print(f\"empty_ar: {empty_ar}\"\
          )\n    \n    # No need to clean the refined_answer as it's already a dictionary\n\
          \    if refined_answer:\n        print(\"refined_answer is not empty, processing\
          \ it...\")\n        answer_data = get_answer_value(refined_answer)  # Use\
          \ the dictionary directly\n    elif empty_answer:\n        print(\"empty_answer\
          \ is not empty, processing it...\")\n        answer_data = get_answer_value(empty_answer)\n\
          \    elif refined_ar:\n        print(\"refined_ar is not empty, processing\
          \ it...\")\n        answer_data = get_answer_value(refined_ar)\n    elif\
          \ empty_ar:\n        print(\"empty_ar is not empty, processing it...\")\n\
          \        answer_data = get_answer_value(empty_ar)\n    else:\n        print(\"\
          No valid input provided, returning error message.\")\n        return {'result':\
          \ \"عذراً. حدث خطأ مؤقت برجاء المحاولة في وقت لاحق.\"}\n\n    if isinstance(answer_data,\
          \ dict):\n        print(f\"answer_data is a dict: {answer_data}\")\n   \
          \     return {'result': answer_data.get('final_answer', json.dumps(answer_data))}\n\
          \    else:\n        print(f\"answer_data is not a dict, returning as string:\
          \ {answer_data}\")\n        return {'result': str(answer_data)}"
        code_language: python3
        desc: Safeguard against JSON string format converting it to plain text.
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: JSON to String
        type: code
        variables:
        - value_selector:
          - '17372690270110'
          - structured_output
          variable: refined_answer
        - value_selector:
          - '1745759008719'
          - structured_output
          variable: empty_answer
        - value_selector:
          - '17460405924110'
          - structured_output
          variable: refined_ar
        - value_selector:
          - '17460438306840'
          - structured_output
          variable: empty_ar
      height: 97
      id: '1739858038668'
      position:
        x: 8157.742728676756
        y: 683.1138261701558
      positionAbsolute:
        x: 8157.742728676756
        y: 683.1138261701558
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - sys
          - query
        desc: Identifies a follow up query and understands its intent or determines
          it is not a follow up query.
        memory:
          query_prompt_template: '{{#sys.query#}}'
          role_prefix:
            assistant: ''
            user: ''
          window:
            enabled: true
            size: 15
        model:
          completion_params: {}
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: f779ee35-3a97-4cdf-9629-cfed9be74d69
          role: system
          text: "You are an expert {{#1740898151928.result#}}-speaking HR assistant.\n\
            Your task is to transform employee queries into clear, precise, and contextually\
            \ grounded questions, especially when the latest user input is a follow-up\
            \ or minimal.\n\n#Rules\n1. Review the entire conversation history, both\
            \ user and assistant turns.\nAlways use all available context to fully\
            \ understand the employee’s intent.\n\nExample:\nEnglish:\nUser: What’s\
            \ the leave policy?\nAssistant: Are you asking about annual or sick leave?\n\
            User: Annual.\n→ Output: Whats the annual leave policy?\nArabic:\nUser:\
            \ ما هي سياسة الاجازات؟?\nAssistant: هل تسأل عن الاجازة السنوية أم المرضية؟\n\
            User: السنوية\n→ Output: ما هي سياسة الإجازة السنوية؟\n\n2. If the latest\
            \ user input is short, ambiguous, or a confirmation (e.g., \"yes\", \"\
            نعم\", \"that\", \"this\"), logically combine it with their previous queries\
            \ (especially if clarifying a previous assistant question) to infer the\
            \ intended meaning.\n\nExample:\nEnglish:\nUser: I want to know the vacation\
            \ days for Eid.\nAssistant: Do you mean Eid Al-Fitr?\nUser: Yes.\n→ Output:\
            \ How many days off are there during Eid al-Fitr?\nArabic:\nUser: أريد\
            \ أن أعرف أيام إجازة العيد.\nAssistant: هل تقصد عيد الفطر؟?\nUser: نعم\n\
            → Output: كم عدد أيام الإجازة في عيد الفطر؟\n\n3. Do not restate assistant’s\
            \ previous utterances verbatim in your refined query.\nAlways produce\
            \ a clear and concise question or phrase that represents the user’s true\
            \ intent in your own words.\n\nExample:\n\nDon’t repeat: “كم عدد أيام\
            \ الإجازة في عيد الفطر؟” if it was already just suggested by the assistant;\
            \ instead, rephrase to best capture the user’s intent drawn from context.\n\
            \n4. When the latest input is a full but vague or follow-up user query,\
            \ logically combine it with relevant context from the chat history to\
            \ make it explicit and focused using only the user's own words.\n\nExample:\n\
            English:\nUser: What about overtime?\nPrevious discussion: Pay rates.\n\
            → Output: What is the overtime rate?\nArabic:\nUser: ماذا عن العمل الإضافي؟\n\
            Previous discussion: معدلات الأجور\n→ Output: ما هو معدل الأجر الإضافي؟\n\
            \n5. NEVER invent, suppose, or add any information not mentioned by the\
            \ user.\nYou may reorder, combine, or clarify using ONLY information directly\
            \ in the user’s prior messages—but never infer or guess details that the\
            \ user did not explicitly provide.\n\nExample:\nEnglish:\nUser: What are\
            \ the working hours during Ramadan?\n(Unless the user specified \"for\
            \ office employees,\" do NOT add that assumption.)\n→ Output: What are\
            \ the working hours during Ramadan?\nArabic:\nUser: ما هي ساعات العمل\
            \ خلال شهر رمضان؟\n(Unless the user specified \"for office employees,\"\
            \ do NOT add that assumption.)\n→ Output: ما هي ساعات العمل خلال شهر رمضان؟\n\
            \nOUTPUT:\nfinal_query MUST BE a single, self-contained, culturally appropriate\
            \ refined query in natural {{#1740898151928.result#}}, so the meaning\
            \ is clear without needing the conversation history. Do NOT add any reasoning\
            \ or explanation to your output. If you cannot create this refined query,\
            \ use the user's latest query as-is.\n\nPlease follow these steps and\
            \ document your reasoning and result as structured JSON.  \nFor each step,\
            \ use the previous and current user/assistant messages in your process.\
            \  \nDo NOT skip any step.  \nAt the end, provide ONLY the requested JSON,\
            \ with the output key 'final_query' containing the perfected, contextually\
            \ grounded employee query in {{#1740898151928.result#}} as instructed.\n\
            \nExample JSON format:\n\n{\n  \"review_history\": \"Summarize intent,\
            \ main points from conversation history, referencing user and assistant\
            \ turns as needed.\",\n  \"resolve_ambiguity\": \"How ambiguity or short\
            \ confirmation was resolved, referencing what you inferred and from which\
            \ message(s) if applicable.\",\n  \"avoid_repetition\": \"How you avoided\
            \ repeating assistant’s prior wording.\",\n  \"clarify_with_context\"\
            : \"How you clarified or refocused using context, stating your reasoning\
            \ (only from user’s words).\",\n  \"no_new_information\": \"Verify here\
            \ that no added/extrapolated information is present. If user gave insufficient\
            \ detail, explicitly state your caution.\",\n  \"final_query\": \"The\
            \ final, self-contained refined query in {{#1740898151928.result#}}. If\
            \ you cannot create this refined query, use the user's latest query as-is.\"\
            \n}\n\nObjective:\nThe main goal is to create a new query that does not\
            \ introduce anything new, but accurately reflects the user's true intent\
            \ as derived from the ongoing conversation and their original wording."
        - id: e83963aa-53be-4cf8-a744-9e99fc03ddb9
          role: user
          text: 'Chat History: ''{{#1739783725003.result#}}''

            Latest Query: ''{{#context#}}'''
        retry_config:
          max_retries: 5
          retry_enabled: true
          retry_interval: 1539
        selected: false
        structured_output:
          schema:
            additionalProperties: false
            properties:
              avoid_repetition:
                description: How you avoided repeating assistant’s prior wording.
                type: string
              clarify_with_context:
                description: How you clarified or refocused using context, stating
                  your reasoning (only from user’s words).
                type: string
              final_query:
                description: The final, self-contained refined query in instructed
                  language. If you cannot create this refined query, use the user's
                  latest query as-is.
                type: string
              no_new_information:
                description: Verify here that no added/extrapolated information is
                  present. If user gave insufficient detail, explicitly state your
                  caution.
                type: string
              resolve_ambiguity:
                description: How ambiguity or short confirmation was resolved, referencing
                  what you inferred and from which message(s) if applicable.
                type: string
              review_history:
                description: Summarize intent, main points from conversation history,
                  referencing user and assistant turns as needed.
                type: string
            required:
            - review_history
            - resolve_ambiguity
            - avoid_repetition
            - clarify_with_context
            - no_new_information
            - final_query
            type: object
        structured_output_enabled: true
        title: Intent Understanding
        type: llm
        variables: []
        vision:
          enabled: false
      height: 178
      id: '1739860244710'
      position:
        x: 1731.2081416185795
        y: -156.2476615192344
      positionAbsolute:
        x: 1731.2081416185795
        y: -156.2476615192344
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: contains
            id: 814bf644-817d-4c2a-bd26-f7eb9d27390d
            value: ar
            varType: string
            variable_selector:
            - '1734277262041'
            - query_language
          id: 'true'
          logical_operator: and
        desc: Decides to retrieve from relevant KB based on the latest query language.
        selected: false
        title: IF/ELSE 3
        type: if-else
      height: 169
      id: '1740548230421'
      position:
        x: 3983.77725446019
        y: 551.9162000554327
      positionAbsolute:
        x: 3983.77725446019
        y: 551.9162000554327
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(kb_ar: dict, kb_en: dict) -> dict:\n    if kb_ar:\n      \
          \  return {'result': kb_ar}\n    elif kb_en:\n        return {'result':\
          \ kb_en}\n    else:\n        return {'result': []}\n"
        code_language: python3
        desc: Returns the valid result either from Ar KB or En KB
        outputs:
          result:
            children: null
            type: array[object]
        selected: false
        title: Getting KB
        type: code
        variables:
        - value_selector:
          - '1742969021171'
          - result
          variable: kb_ar
        - value_selector:
          - '1742989333164'
          - result
          variable: kb_en
      height: 97
      id: '1740552982823'
      position:
        x: 6594.0742006985
        y: 620.8483443075141
      positionAbsolute:
        x: 6594.0742006985
        y: 620.8483443075141
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import ast\n\ndef main(conv_history: str) -> dict:\n    try:\n    \
          \    # Check if the conv_history is a string representation of a list\n\
          \        result_list = ast.literal_eval(conv_history)\n        \n      \
          \  # Ensure that the evaluated result is indeed a list\n        if not isinstance(result_list,\
          \ list):\n            return {'result': 0}\n        \n        if len(result_list)\
          \ == 1:\n            return {'result': 1}\n        else:\n            return\
          \ {'result': 2}\n    except (ValueError, SyntaxError, TypeError):\n    \
          \    return {'result': 0}\n"
        code_language: python3
        desc: Detects if there is any previous chat history in the active conversation
          id.
        outputs:
          result:
            children: null
            type: number
        selected: false
        title: Chat History Detector
        type: code
        variables:
        - value_selector:
          - '1739783725003'
          - result
          variable: conv_history
      height: 97
      id: '1740834697144'
      position:
        x: 702.4477735352216
        y: -272.16228902112186
      positionAbsolute:
        x: 702.4477735352216
        y: -272.16228902112186
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(lang: str) -> dict:\n    if lang == \"en\":\n        return\
          \ {\"result\": \"English\"}\n    else:\n        return {\"result\": \"Arabic\"\
          }"
        code_language: python3
        desc: Returns the full language name.
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Full Language Name
        type: code
        variables:
        - value_selector:
          - '1734277262041'
          - query_language
          variable: lang
      height: 81
      id: '1740898151928'
      position:
        x: 330.54472601042943
        y: -272.16228902112186
      positionAbsolute:
        x: 330.54472601042943
        y: -272.16228902112186
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "\ndef main(KB_ar: dict) -> dict:\n    if KB_ar:\n        return {\"\
          result\": KB_ar}\n    \n    else:\n        return {\"result\": []}\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: array[object]
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 1000
        selected: false
        title: Retrieval Results
        type: code
        variables:
        - value_selector:
          - '1753246681375'
          - output
          value_type: array[object]
          variable: KB_ar
      height: 82
      id: '1742969021171'
      position:
        x: 6192.355185788645
        y: 405.5788614466998
      positionAbsolute:
        x: 6192.355185788645
        y: 405.5788614466998
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "\ndef main(KB_en: dict) -> dict:\n    if KB_en:\n        return {\"\
          result\": KB_en}\n\n    else:\n        return {\"result\": []}\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: array[object]
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 1000
        selected: false
        title: Retrieval Results 2
        type: code
        variables:
        - value_selector:
          - '1753164834772'
          - output
          value_type: array[object]
          variable: KB_en
      height: 84
      id: '1742989333164'
      position:
        x: 5952.305468014791
        y: 817.7410946565976
      positionAbsolute:
        x: 5952.305468014791
        y: 817.7410946565976
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "def main(conversation_id: str, answer: str, chat_history: dict) ->\
          \ dict:\n    if conversation_id in chat_history:\n        chat_history[conversation_id].append(answer)\n\
          \    else:\n        chat_history[conversation_id] = [answer]\n    return\
          \ {'result': chat_history}\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: object
        selected: false
        title: Update History Answer
        type: code
        variables:
        - value_selector:
          - sys
          - conversation_id
          variable: conversation_id
        - value_selector:
          - '1739858038668'
          - result
          variable: answer
        - value_selector:
          - conversation
          - chat_history
          variable: chat_history
      height: 53
      id: '1745315236880'
      position:
        x: 8479.528059457507
        y: 683.1138261701558
      positionAbsolute:
        x: 8479.528059457507
        y: 683.1138261701558
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1745315236880'
          - result
          variable_selector:
          - conversation
          - chat_history
          write_mode: over-write
        selected: false
        title: Variable Assigner 2
        type: assigner
        version: '2'
      height: 87
      id: '1745315515092'
      position:
        x: 8819.618816466607
        y: 683.1138261701558
      positionAbsolute:
        x: 8819.618816466607
        y: 683.1138261701558
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        dataset_ids:
        - ifbDUbOQquDF7SXD0GzoPF99XKjyzL/IXtSv6G279+cABkV7lQe2XU7nYAKQ9KaJ
        desc: ''
        multiple_retrieval_config:
          reranking_enable: true
          reranking_mode: reranking_model
          reranking_model:
            model: Qwen/Qwen3-Reranker-0.6B
            provider: langgenius/openai_api_compatible/openai_api_compatible
          score_threshold: 0.2
          top_k: 3
          weights:
            keyword_setting:
              keyword_weight: 0
            vector_setting:
              embedding_model_name: all-minilm:33m
              embedding_provider_name: langgenius/ollama/ollama
              vector_weight: 1
        query_variable_selector:
        - '1746016424681'
        - result
        retrieval_mode: multiple
        selected: false
        title: Knowledge Retrieval 3
        type: knowledge-retrieval
      height: 91
      id: '1748414761482'
      position:
        x: 3087.3499340977055
        y: 482.4644280542042
      positionAbsolute:
        x: 3087.3499340977055
        y: 482.4644280542042
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        answer: '{{#1748414874400.result#}}'
        desc: ''
        selected: false
        title: Answer for vague
        type: answer
        variables: []
      height: 103
      id: '1745756078108'
      position:
        x: 4020.776934960632
        y: 57.20861887567773
      positionAbsolute:
        x: 4020.776934960632
        y: 57.20861887567773
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - sys
          - query
        desc: ''
        memory:
          query_prompt_template: '{{#sys.query#}}'
          role_prefix:
            assistant: ''
            user: ''
          window:
            enabled: true
            size: 15
        model:
          completion_params: {}
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: bcbafb47-1213-4556-a4c7-5c599ceba176
          role: system
          text: 'You are Bank Boubyan''s professional chatbot for HR internal policies.
            If the employee''s query is HR-related, respond politely and professionally
            stating that you cannot find information in the available resources and
            you must recommend to contact HR employee relations for further help at
            Personnel@bankboubyan.com. Do not attempt to answer based on assumptions
            or external knowledge.. If the query is not HR-related, refuse politely
            to respond stressing on you only answer HR-related queries.


            Here is the query you received:'
        - id: 05228e82-6e62-4e93-8ce5-7f484e53e39f
          role: user
          text: '{{#context#}}'
        selected: false
        structured_output:
          schema:
            additionalProperties: false
            properties:
              final_answer:
                description: Your answer
                type: string
              hr_related:
                description: classify query either HR-related or not
                enum:
                - 'true'
                - 'false'
                type: string
            required:
            - hr_related
            - final_answer
            type: object
        structured_output_enabled: true
        title: empty answer
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1745759008719'
      position:
        x: 7692.469866583229
        y: 627.9051751024986
      positionAbsolute:
        x: 7692.469866583229
        y: 627.9051751024986
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(ret_query: str) -> str:\n    return {\"result\": str(ret_query)}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: ToString
        type: code
        variables:
        - value_selector:
          - '17460179285850'
          - result
          variable: ret_query
      height: 53
      id: '1745904416023'
      position:
        x: 4352.6707265843825
        y: 405.5788614466998
      positionAbsolute:
        x: 4352.6707265843825
        y: 405.5788614466998
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: '='
            id: cbd0bb56-3512-4813-9111-a19df1063bcb
            value: '1'
            varType: number
            variable_selector:
            - '1740834697144'
            - result
          id: 'true'
          logical_operator: and
        desc: ''
        selected: false
        title: IF/ELSE 1
        type: if-else
      height: 125
      id: '1746008075423'
      position:
        x: 1414.4728203651357
        y: -272.16228902112186
      positionAbsolute:
        x: 1414.4728203651357
        y: -272.16228902112186
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - '1746016424681'
          - result
        desc: ''
        memory:
          query_prompt_template: '{{#sys.query#}}'
          role_prefix:
            assistant: ''
            user: ''
          window:
            enabled: true
            size: 15
        model:
          completion_params: {}
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: f850dce6-c32e-4ae0-8505-d071dc6355e5
          role: system
          text: You've received an employee inquiry that isn't related to HR policies.
            Analyze the inquiry and carefully interpret its intent. If the inquiry
            isn't truly HR-related, politely decline, emphasizing that you can only
            help with HR-related matters. If the inquiry is HR-related, reassure the
            employee that you understand their intent and then ask for additional
            details to better assist them. Additionally, suggest relevant and important
            questions they may be looking for answers to regarding the topic they're
            inquiring about. Make sure your response is natural, clear, and interactive.
            Don't include or repeat the original instructions in your response.
        - id: 2113d63a-6fa1-4f39-8e4e-4152005fda8e
          role: user
          text: '{{#context#}}'
        selected: false
        title: Non HR-related
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1746015679959'
      position:
        x: 3087.3499340977055
        y: 270.061433932692
      positionAbsolute:
        x: 3087.3499340977055
        y: 270.061433932692
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import re\n\ndef main(same_query: str, intermediate_query: str = None,\
          \ intermediate_query_ar: str = None) -> dict:\n    \"\"\"\n    Removes special\
          \ characters from the query and capitalizes the first letter.\n    If intermediate_query\
          \ has a value, it uses that instead of same_query.\n    \"\"\"\n    \n \
          \   # Determine which query to use\n    if intermediate_query and intermediate_query.strip():\n\
          \        query_to_use = intermediate_query\n    elif intermediate_query_ar\
          \ and intermediate_query_ar.strip():\n        query_to_use = intermediate_query_ar\n\
          \    else:\n        query_to_use = same_query\n    \n    # Remove special\
          \ characters (allowing Arabic letters)\n    cleaned_query = re.sub(r'[^a-zA-Z0-9\\\
          u0600-\\u06FF\\s]', '', query_to_use)\n    \n    # Capitalize the first\
          \ letter\n    final_query = cleaned_query.strip().capitalize()\n    return\
          \ {\"result\": final_query}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Retrieval Query
        type: code
        variables:
        - value_selector:
          - sys
          - query
          variable: same_query
        - value_selector:
          - '1747824909408'
          - cleaned_intent
          variable: intermediate_query
      height: 53
      id: '1746016424681'
      position:
        x: 2357.6910661814036
        y: -283.98303827522216
      positionAbsolute:
        x: 2357.6910661814036
        y: -283.98303827522216
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        answer: '{{#1747908419220.result#}}'
        desc: ''
        selected: false
        title: Answer for Non-related
        type: answer
        variables: []
      height: 103
      id: '1746016606205'
      position:
        x: 3757.5579689242863
        y: 270.061433932692
      positionAbsolute:
        x: 3757.5579689242863
        y: 270.061433932692
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: '='
            id: cbd0bb56-3512-4813-9111-a19df1063bcb
            value: '1'
            varType: number
            variable_selector:
            - '1740834697144'
            - result
          id: 'true'
          logical_operator: and
        desc: ''
        selected: false
        title: أول استفسار أم لا
        type: if-else
      height: 125
      id: '17460178945620'
      position:
        x: 1114.4728203651357
        y: 607.0653354212429
      positionAbsolute:
        x: 1114.4728203651357
        y: 607.0653354212429
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - sys
          - query
        desc: Identifies a follow up query and understands its intent or determines
          it is not a follow up query.
        memory:
          query_prompt_template: '{{#sys.query#}}'
          role_prefix:
            assistant: ''
            user: ''
          window:
            enabled: true
            size: 15
        model:
          completion_params: {}
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: f779ee35-3a97-4cdf-9629-cfed9be74d69
          role: system
          text: "أنت مساعد موارد بشرية محترف.\n\nمهمتك هي تحويل استفسارات الموظف إلى\
            \ أسئلة واضحة ومحددة ومستندة للسياق، خاصةً حينما يكون أحدث استعلام من\
            \ المستخدم متابعة لأسئلة سابقة أو يحتوي الحد الأدنى من المعلومات.\n\n\
            # القواعد:\n1. قم بمراجعة سجل المحادثة بالكامل، سواء كان المستخدم أو المساعد.\n\
            استخدم دائمًا كل السياق المتاح لفهم نية الموظف بشكل كامل.\n\nمثال:\nالمستخدم:\
            \ ما هي سياسة الإجازة؟\nالمساعد: هل تسأل عن الإجازة السنوية أو المرضية؟\n\
            المستخدم: السنوية.\n\nقم بتحويله إلى:\nما هي سياسة الإجازة السنوية؟\n\n\
            2. إذا كانت أحدث استفسارات المستخدم قصيرة، أو غامضة، أو مجرد تأكيد (مثل:\
            \ نعم، بالتأكيد، لا أظن)، فادمجها منطقيًا مع استعلاماته السابقة لاستنتاج\
            \ المعنى المقصود.\n\nمثال:\nالمستخدم: أريد معرفة أيام إجازة العيد.\nالمساعد:\
            \ هل تقصد عيد الفطر؟\nالمستخدم: نعم.\n\nقم بتحويله إلى:\nكم عدد أيام الإجازة\
            \ في عيد الفطر؟\n\n3. لا تُعِد صياغة عبارات المساعد السابقة حرفيًا في\
            \ استعلامك المُحسّن.\nاحرص دائمًا على صياغة سؤال أو عبارة واضحة وموجزة\
            \ تُعبّر عن نية المستخدم الحقيقية بكلماتك الخاصة.\n\nمثال:\n\nلا تُكرر:\
            \ \"كم عدد أيام الإجازة في عيد الفطر؟\" إذا كان المساعد قد اقترحها مُسبقًا؛\
            \ بل أعد صياغتها لتُعبّر بشكل أفضل عن نية المستخدم المُستمدة من السياق.\n\
            \n4. عندما يكون الاستفسار الأخير للمستخدم عبارة عن استعلام كامل ولكنه\
            \ غامض أو يتم استخدامه لغرض للمتابعة، قم بدمجه منطقيًا مع السياق ذي الصلة\
            \ من سجل الدردشة لجعله واضحًا ومركزًا باستخدام كلمات المستخدم فقط.\n\n\
            مثال:\nالمستخدم: ماذا عن العمل الإضافي؟\nالمناقشة السابقة: معدلات الأجور.\n\
            \nقم بتحويله إلى:\nما هو معدل أجور العمل الإضافي؟\n\n٥. لا تُختلق أو تفترض\
            \ أو تُضيف أي معلومات لم يذكرها المستخدم.\nيُسمح لك بإعادة ترتيب المعلومات\
            \ أو دمجها أو توضيحها باستخدام المعلومات الواردة مباشرةً في رسائل المستخدم\
            \ السابقة فقط، ولكن لا تستنتج أو تُخمّن تفاصيل لم يُقدّمها المستخدم صراحةً.\n\
            \nمثال:\nالمستخدم: ما هي ساعات العمل خلال شهر رمضان؟\n(إلا إذا حدّد المستخدم\
            \ \"لموظفي المكاتب\"، فلا تُضِف هذا الافتراض.)\n\nقم بتحويله إلى:\nما\
            \ هي ساعات العمل خلال شهر رمضان؟\n\nالنتيجة:\nيجب أن يكون الاستعلام النهائي\
            \ استعلامًا واحدًا محدداً مُستقلًا بذاته، ومناسبًا ثقافيًا، بتنسيق طبيعي،\
            \ ليكون المعنى واضحًا دون الحاجة إلى سجلّ المحادثات. لا تُضِف أي منطق\
            \ أو تفسير إلى النتيجة. إذا لم تتمكن من إنشاء هذا الاستعلام المُحسّن،\
            \ فاستخدم أحدث استعلام للمستخدم كما هو دون تغيير.\n\nيرجى اتباع هذه الخطوات\
            \ وتوثيق منطقك ونتيجتك بصيغة JSON مُهيكلة.\n\nفي كل خطوة، استخدم رسائل\
            \ المستخدم/المساعد السابقة والحالية في عمليتك.\n\nلا تتخطَّ أي خطوة.\n\
            \nفي النهاية، قدّم فقط ملف JSON المطلوب، مع مفتاح الإخراج \"final_query\"\
            \ الذي يحتوي على استعلام الموظف المُحسّن والمُستند إلى السياق وفقًا للتعليمات.\n\
            \nمثال على الـ JSON output المطلوب:\n\n{\n  \"review_history\": \"Summarize\
            \ intent, main points from conversation history, referencing user and\
            \ assistant turns as needed.\",\n  \"resolve_ambiguity\": \"How ambiguity\
            \ or short confirmation was resolved, referencing what you inferred and\
            \ from which message(s) if applicable.\",\n  \"avoid_repetition\": \"\
            How you avoided repeating assistant’s prior wording.\",\n  \"clarify_with_context\"\
            : \"How you clarified or refocused using context, stating your reasoning\
            \ (only from user’s words).\",\n  \"no_new_information\": \"Verify here\
            \ that no added/extrapolated information is present. If user gave insufficient\
            \ detail, explicitly state your caution.\",\n  \"final_query\": \"The\
            \ final, self-contained refined query in {{#1740898151928.result#}}. If\
            \ you cannot create this refined query, use the user's latest query as-is.\"\
            \n}\n\nالهدف الرئيسي هو إنشاء استعلام جديد لا يقدم أي جديد، بل يعكس بدقة\
            \ نية المستخدم الحقيقية كما هي مستمدة من المحادثة الجارية."
        - id: e83963aa-53be-4cf8-a744-9e99fc03ddb9
          role: user
          text: 'المحادثة: {{#1739783725003.result#}}

            أحدث استعلام: {{#context#}}'
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 1000
        selected: false
        structured_output:
          schema:
            additionalProperties: false
            properties:
              avoid_repetition:
                description: How you avoided repeating assistant’s prior wording.
                type: string
              clarify_with_context:
                description: How you clarified or refocused using context, stating
                  your reasoning (only from user’s words).
                type: string
              final_query:
                description: The final, self-contained refined query in instructed
                  language. If you cannot create this refined query, use the user's
                  latest query as-is.
                type: string
              no_new_information:
                description: Verify here that no added/extrapolated information is
                  present. If user gave insufficient detail, explicitly state your
                  caution.
                type: string
              resolve_ambiguity:
                description: How ambiguity or short confirmation was resolved, referencing
                  what you inferred and from which message(s) if applicable.
                type: string
              review_history:
                description: Summarize intent, main points from conversation history,
                  referencing user and assistant turns as needed.
                type: string
            required:
            - review_history
            - resolve_ambiguity
            - avoid_repetition
            - clarify_with_context
            - no_new_information
            - final_query
            type: object
        structured_output_enabled: true
        title: فهم النية بتاريخ الدردشة
        type: llm
        variables: []
        vision:
          enabled: false
      height: 178
      id: '17460179174320'
      position:
        x: 1465.0912164817732
        y: 753.0653346362619
      positionAbsolute:
        x: 1465.0912164817732
        y: 753.0653346362619
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import re\n\ndef main(same_query: str, intermediate_query: str = None,\
          \ intermediate_query_ar: str = None) -> dict:\n    \"\"\"\n    Removes special\
          \ characters from the query and capitalizes the first letter.\n    If intermediate_query\
          \ has a value, it uses that instead of same_query.\n    \"\"\"\n    \n \
          \   # Determine which query to use\n    if intermediate_query and intermediate_query.strip():\n\
          \        query_to_use = intermediate_query\n    elif intermediate_query_ar\
          \ and intermediate_query_ar.strip():\n        query_to_use = intermediate_query_ar\n\
          \    else:\n        query_to_use = same_query\n    \n    # Remove special\
          \ characters (allowing Arabic letters)\n    cleaned_query = re.sub(r'[^a-zA-Z0-9\\\
          u0600-\\u06FF\\s]', '', query_to_use)\n    \n    # Capitalize the first\
          \ letter\n    final_query = cleaned_query.strip().capitalize()\n    return\
          \ {\"result\": final_query}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: اختيار الاستعلام الصحيح
        type: code
        variables:
        - value_selector:
          - sys
          - query
          variable: same_query
        - value_selector:
          - '17460179174320'
          - text
          variable: intermediate_query
      height: 53
      id: '17460179285850'
      position:
        x: 1783.691066718496
        y: 601.0653354625578
      positionAbsolute:
        x: 1783.691066718496
        y: 601.0653354625578
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - '17460179285850'
          - result
        desc: ''
        memory:
          query_prompt_template: '{{#sys.query#}}'
          role_prefix:
            assistant: ''
            user: ''
          window:
            enabled: true
            size: 15
        model:
          completion_params: {}
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: 22808a02-a379-4f82-b469-144c2dc0ed8c
          role: system
          text: "أنت مساعد موارد بشرية في بنك بوبيان. تطبيق (بوبياني) هو تطبيق الموظفين\
            \ الرسمي للبنك. مهمتك هي تصنيف استفسارات الموظفين إلى فئة واحدة من الفئات\
            \ المذكورة، باتباع عملية من خطوتين:\n\nالخطوة 1: تحديد الهدف\n\nنية واضحة:\
            \ إذا كان الاستفسار يتضمن طلبًا أو سؤالًا أو إجراءً محددًا (مثل: \"كيف\
            \ أقدم طلب إجازة؟\" \"كم يومًا يمكنني العمل عن بُعد أسبوعيًا؟\").\n\n\
            نية غامضة: إذا كان الاستفسار يتضمن كلمة أو جملة بدون سؤال واضح أو طلب\
            \ قابل للتنفيذ (مثل: \"سياسة الإجازات\"، \"المزايا\"، \"كشف حساب بنكي\"\
            ، \"ما هي سياسة العمل عن بُعد\"، \"سياسات السلفة على الراتب\").\n\nالخطوة\
            \ 2: إذا كانت النية واضحة فقط، فحدد ما إذا كانت تتعلق بدعم الموظفين:\n\
            \n# يتعلق بدعم الموظفين: إذا كان الاستفسار أو الطلب يتعلق مباشرةً بإدارة\
            \ أي جانب من جوانب دورة حياة الموظف، بدءًا من التوظيف الأوّلي والتأهيل،\
            \ مرورًا بالدعم والتطوير المستمر، وصولًا إلى إنهاء الخدمة. دورة حياة الموظفين\
            \ تشمل نطاقًا واسعًا من الاحتياجات والعمليات، بما في ذلك التفاعل مع تطبيق\
            \ (بوبياني) الداخليللبنك  وإدارة المزايا الأوسع نطاقًا. يشمل نطاق الاستفسارات\
            \ أيضاً الطلبات المتعلقة بأي شيء يحدث خلال رحلة الموظف مع الشركة، بما\
            \ في ذلك الدعم المالي والشخصي والعائلي.\n\nفيما يلي تفصيل لبعض الخيارات:\n\
            \n- التوظيف والتأهيل: تُركز هذه المرحلة على عملية التوظيف الأولية ودمج\
            \ الموظفين الجدد. من أمثلة الاستفسارات:\n\nطلبات شهادات الراتب: مطلوبة\
            \ لإنشاء حساب مصرفي، وطلبات القروض، وغيرها من الأمور المالية الشخصية.\n\
            \nتحديثات فترة الاختبار: تأكيد فترات الاختبار، وإنجاز المهام، وإجراءات\
            \ الموارد البشرية المرتبطة بها.\n\nدعم التأهيل: إرشادات حول مهام التأهيل\
            \ الأساسية، والوصول إلى الأنظمة، والتدريب الأولي.\n\n- الدعم والمزايا\
            \ المستمرة (المالية والشخصية): تُغطي هذه الخدمات الاحتياجات اليومية للموظفين\
            \ أثناء عملهم الفعلي. من أمثلتها:\n\nالرفاهية المالية:\nإدارة الخدمات\
            \ المصرفية والرواتب: تغييرات في الحسابات المصرفية، واستفسارات عن الرواتب،\
            \ واختلافات الدفع، وكشوفات الرواتب.\n\nالتمويل الشخصي (القرض الحسن): استفسارات\
            \ حول برامج القروض المعفاة من الفوائد وجداول السداد.\n\nبطاقات الائتمان:\
            \ الوصول إلى برامج بطاقات الائتمان التي ترعاها الشركة والمزايا المرتبطة\
            \ بها.\n\nالسلف على الرواتب: طلبات المساعدة المالية قصيرة الأجل\n\nالمزايا\
            \ الشخصية:\nبدل تذاكر الطيران: استفسارات حول الأهلية، وإجراءات الحجز،\
            \ والشروط المرتبطة بها.\nالتأمين الطبي: استفسارات حول تفاصيل التغطية،\
            \ والتسجيل، ومعالجة المطالبات، وخيارات خطة الأسرة.\nهدايا الزواج والمواليد\
            \ الجدد: فهم الأهلية والحصول على تفاصيل حول هذه المزايا الاحتفالية.\n\
            مساعدة تعليم الطفل: استفسارات حول برامج الدعم المالي لتعليم أطفال الموظف.\n\
            إدارة الإجازات: تُعد هذه الميزة عنصرًا أساسيًا في رفاهية الموظف وامتثاله.\n\
            إجازة الوفاة: معلومات حول الإجازات المسموح بها في حالات وفاة الأقارب.\n\
            إجازة الأمومة: الأهلية، والاستحقاقات، والإجراءات ذات الصلة.\nإجازة الحج:\
            \ الأهلية وإجراءات الحصول على إجازة لأداء فريضة الحج.\nإجازة الأبوة: الأهلية\
            \ وإجراءات الحجز.\nإجازة المرض: الاستحقاق، ومتطلبات إثبات المرض، والسياسات\
            \ ذات الصلة.\nالإجازة السنوية: معدلات الاستحقاق، وإجراءات الحجز، وسياسات\
            \ الترحيل.\n\n- التطوير المهني والأداء: يركز هذا القسم على دعم نمو الموظفين\
            \ وتقدير مساهماتهم. من الأمثلة على ذلك:\n\nمؤشرات الأداء الرئيسية (KPIs):\
            \ توضيح مؤشرات الأداء الرئيسية الفردية والجماعية وتأثيرها على تقييمات\
            \ الأداء.\n\nأوصاف الوظائف: الوصول إلى أوصاف وظيفية دقيقة ومحدثة.\n\n\
            الوظائف الداخلية: إرشادات حول التقدم للوظائف الداخلية الشاغرة وفرص التقدم\
            \ الوظيفي.\n\nالمسارات المهنية: فهم فرص التقدم الوظيفي المحتملة داخل الشركة.\n\
            \nمراجعات الأداء: إرشادات حول عملية المراجعة، وتفسير الملاحظات، وتحديد\
            \ الأهداف.\n\nبرامج التدريب: معلومات حول فرص التدريب المتاحة، وإجراءات\
            \ التسجيل، ومبادرات تطوير المهارات.\n\nدورات الجدارة والزيادات: فهم عملية\
            \ تعديل الرواتب بناءً على الأداء.\n\n- إنهاء الخدمة والمغادرة: يشمل هذا\
            \ القسم عملية فصل الموظف من الشركة مع ضمان الامتثال وحل المسائل العالقة.\
            \ من الأمثلة على ذلك:\n\nتجديد الإقامة: المساعدة في الأعمال الورقية والإجراءات\
            \ المتعلقة بتصاريح إقامة الموظفين.\n\nتصاريح العمل: معالجة وتجديد تصاريح\
            \ العمل.\n\nالراتب النهائي والتسويات: فهم حسابات الراتب النهائي والمزايا\
            \ المتبقية.\n\nإعادة ممتلكات الشركة: إجراءات إعادة أصول الشركة.\n\n# لا\
            \ يتعلق بدعم الموظفين: أي سؤال لا يتعلق إطلاقًا بدورة حياة الموظف، مثل\
            \ الترفيه، أو الطعام، أو السكن، أو أي محادثة عادية.\n\n# التحية: إذا كان\
            \ الاستفسار مجرد تحية بسيطة أو عبارة شكر مثل أهلا أو شكرا.\n\nالفئات النهائية:\n\
            \nنية واضحة - تتعلق بدعم الموظفين\nنية واضحة - لا تتعلق بدعم الموظفين\n\
            نية غامضة\nالتحية\n\nأمثلة:\n\n\"كيف أقدم طلب إجازة؟\" ⇒ نية واضحة - تتعلق\
            \ بدعم الموظفين\n\"ما هي الأماكن الترفيهية في الكويت؟\" ⇒ نية واضحة -\
            \ لا تتعلق بدعم الموظفين\n\"سياسة الإجازات\" ⇒ نية غامضة\n\"المزايا\"\
            \ ⇒ نية غامضة\n\"جدول الرواتب\" ⇒ نية غامضة\n\"هل يمكنني التسجيل في دورات\
            \ الشركة التدريبية؟\" ⇒ نية واضحة - تتعلق بدعم الموظفين\n\"كيف أستخدم\
            \ تطبيق بوبياني؟\" ⇒ نية واضحة - تتعلق بدعم الموظفين\n\"أحتاج إلى سياسة\
            \ تجديد الإقامة\" ⇒ نية غامضة\n\"سياسات العمل الداخلية\" ⇒ نية غامضة\n\
            \"سياسة قرض حسن\" ⇒ نية غامضة\n\"مرحباً!\" ⇒ تحية\n\"شكرا لمساعدتك\" ⇒\
            \ تحية\nسير العمل:\n\nاسأل نفسك: هل هي تحية؟ إذا كانت الإجابة بنعم، صنفها\
            \ كتحية. إذا كانت الإجابة لا، فاسأل نفسك: هل يتضمن الاستفسار سؤالاً أو\
            \ طلباً محدداً؟\nإذا كانت الإجابة لا، ⇒ نية غامضة.\nإذا كانت الإجابة نعم،\
            \ ⇒ انتقل إلى الخطوة 2.\n\nهل يتعلق الطلب أو السؤال بأمور تخص الموظفين؟\n\
            إذا كانت الإجابة نعم، ⇒ نية واضحة - تتعلق بدعم الموظفين.\nإذا كانت الإجابة\
            \ لا، ⇒ نية واضحة - لا تتعلق بدعم الموظفين.\n\nقدّم مُخرجات بصيغة JSON\
            \ مع التصنيف النهائي:\n\n{\n  \"Greeting\": \"Yes\" or \"No\",\n  \"intent_clarity\"\
            : \"Clear Intent\" or \"Vague Intent\",\n  \"clarity_reason\": \"Explain\
            \ why you chose it (Does the inquiry contain a clear request or question?\
            \ Or is it unclear and needs clarification?)\",\n  \"action_if_ambiguous\"\
            : \"If you classify it as vague intent: What would you ask the employee\
            \ to clarify their intent? If it is clear, write N/A\",\n  \"about_hr\"\
            : \"Relates to Employee Support\", \"Does Not Relate to Employee Support\"\
            , or \"N/A\",\n  \"about_hr_reason\": \"Explain why you considered the\
            \ inquiry to be related to employee support, other, or inapplicable if\
            \ it had an ambiguous intent.\",\n  \"final_answer\": \"Clear_Intent_Relates_to_Employee_Support\"\
            , \"Clear_Intent_Does_Not_Relate_to_Employee_Support\", \"Greeting\" or\
            \ \"Vague_intent\"\n}\n\nاستفسار الموظف:"
        - id: cf1f4031-1f4e-48a6-8151-d381a8e436ca
          role: user
          text: '{{#context#}}'
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 1000
        selected: false
        structured_output:
          schema:
            additionalProperties: false
            properties:
              Greeting:
                description: Is the query a greeting?
                enum:
                - 'Yes'
                - 'No'
                type: string
              about_hr:
                description: 'If the intention is clear: Is the question actually
                  related to employee lifecycle/employee policies or is it related
                  to another area?'
                enum:
                - Relates to Employee Support
                - Does Not Relate to Employee Support
                - N/A
                type: string
              about_hr_reason:
                description: Explain why you considered the inquiry to be related
                  to employee support, other, or inapplicable if it had an ambiguous
                  intent.
                type: string
              action_if_ambiguous:
                description: 'If you classify it as vague intent: What would you ask
                  the employee to clarify their intent? If it is clear, write N/A'
                type: string
              clarity_reason:
                description: Explain why you chose it (Does the inquiry contain a
                  clear request or question? Or is it unclear and needs clarification?)
                type: string
              final_answer:
                description: 'Write the final classification for only one of these
                  options: (Clear Intent – Relates to Employee Support, Clear Intent
                  – Does Not Relate to Employee Support, Vague Intent)'
                enum:
                - Clear_Intent_Relates_to_Employee_Support
                - Clear_Intent_Does_Not_Relate_to_Employee_Support
                - Greeting
                - VagueIntent
                type: string
              intent_clarity:
                description: Is the question or request clear (clear intent) or is
                  it just a word or phrase without a specific purpose or explicit
                  request (vague intent)?
                enum:
                - Clear Intent
                - Vague Intent
                type: string
            required:
            - intent_clarity
            - clarity_reason
            - action_if_ambiguous
            - about_hr
            - about_hr_reason
            - final_answer
            - Greeting
            type: object
        structured_output_enabled: true
        title: تصنيف الاستعلام
        type: llm
        variables: []
        vision:
          enabled: false
      height: 118
      id: '1746342059414'
      position:
        x: 2091.131681032441
        y: 543.05313869296
      positionAbsolute:
        x: 2091.131681032441
        y: 543.05313869296
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        dataset_ids:
        - C16mAxpeLxPUQBmiJDW3cUkbVHZc2Wc4FG/o9zzPgwFMavMfLcU4MMAcBXWueL4Q
        desc: ''
        multiple_retrieval_config:
          reranking_enable: true
          reranking_mode: reranking_model
          reranking_model:
            model: Qwen/Qwen3-Reranker-0.6B
            provider: langgenius/openai_api_compatible/openai_api_compatible
          score_threshold: 0.2
          top_k: 3
          weights:
            keyword_setting:
              keyword_weight: 0
            vector_setting:
              embedding_model_name: snowflake-arctic-embed2
              embedding_provider_name: langgenius/ollama/ollama
              vector_weight: 1
        query_variable_selector:
        - '17460179285850'
        - result
        retrieval_mode: multiple
        selected: false
        title: اقتراحات لاستعلام غامض
        type: knowledge-retrieval
      height: 91
      id: '1748426591842'
      position:
        x: 2698.4315002512394
        y: 827.8318516656984
      positionAbsolute:
        x: 2698.4315002512394
        y: 827.8318516656984
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - '17460179285850'
          - result
        desc: ''
        memory:
          query_prompt_template: '{{#sys.query#}}'
          role_prefix:
            assistant: ''
            user: ''
          window:
            enabled: true
            size: 15
        model:
          completion_params: {}
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: f850dce6-c32e-4ae0-8505-d071dc6355e5
          role: system
          text: لقد تلقيت استفسارًا من موظف لا يتعلق بسياسات الموارد البشرية. حلل
            الاستفسار وفسر مقصده بدقة. إذا لم يكن الاستفسار متعلقًا بالموارد البشرية
            تحديدًا، فارفضه بأدب، مؤكدًا أنك لا تستطيع المساعدة إلا في الأمور المتعلقة
            بالموارد البشرية. أما إذا كان الاستفسار متعلقًا بالموارد البشرية، فطمئن
            الموظف بأنك تفهم مقصده، ثم اطلب منه تفاصيل إضافية لمساعدته بشكل أفضل.
            بالإضافة إلى ذلك، اقترح أسئلة مهمة وذات صلة قد يبحث عن إجابات لها فيما
            يتعلق بالموضوع الذي يستفسر عنه. تأكد من أن ردك طبيعي وواضح وتفاعلي. لا
            تُضَمِّن أو تُكرر التعليمات الأصلية في ردك.
        - id: 2113d63a-6fa1-4f39-8e4e-4152005fda8e
          role: user
          text: '{{#context#}}'
        selected: false
        title: رد على استعلام مجال آخر
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '17460180006740'
      position:
        x: 2698.4315002512394
        y: 1098.8838211945929
      positionAbsolute:
        x: 2698.4315002512394
        y: 1098.8838211945929
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        answer: '{{#1748426733711.result#}}'
        desc: ''
        selected: false
        title: رد نهائي استعلام غامض
        type: answer
        variables: []
      height: 103
      id: '17460180080440'
      position:
        x: 3631.6022990959227
        y: 827.8318516656984
      positionAbsolute:
        x: 3631.6022990959227
        y: 827.8318516656984
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        answer: '{{#1750326752884.result#}}'
        desc: ''
        selected: false
        title: رد نهائي استعلام مجال آخر
        type: answer
        variables: []
      height: 103
      id: '17460180219870'
      position:
        x: 3376.191039712996
        y: 1098.8838211945929
      positionAbsolute:
        x: 3376.191039712996
        y: 1098.8838211945929
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: contains
            id: 6a728b01-6c8c-4408-9460-45ad3e8d5b4e
            value: en
            varType: string
            variable_selector:
            - '1734277262041'
            - query_language
          id: 'true'
          logical_operator: and
        desc: ''
        selected: false
        title: IF/ELSE 2
        type: if-else
      height: 125
      id: '1746018244132'
      position:
        x: 1033.6067350832782
        y: -272.16228902112186
      positionAbsolute:
        x: 1033.6067350832782
        y: -272.16228902112186
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - '1736963436010'
          - questions_answers
        desc: Answers based on questions and answers.
        memory:
          query_prompt_template: 'استعلام الموظف:  {{#sys.query#}}

            سياق سياسة الموارد البشرية:

            <text>

            {{#1736963436010.questions_answers#}}

            </text>'
          role_prefix:
            assistant: ''
            user: ''
          window:
            enabled: true
            size: 15
        model:
          completion_params: {}
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: 782b47e4-e518-47b0-8d40-1d8ed089fa48
          role: system
          text: 'أنت مساعد موارد بشرية محترف ودقيق للغاية، متخصص في الرد على استفسارات
            موظفي بنك بوبيان. لديك معرفة متخصصة بالسياق والسياسات المصرفية الداخلية.
            هدفك الرئيسي والأسمى هو تقديم إجابات **دقيقة تمامًا، ومفيدة، ومتوافقة
            مع السياسات، ومستمدة حصريًا من مقتطفات السياق المُقدمة.** لن تستخدم أي
            معرفة خارجية.


            ستقوم بالاستدلال بدقة خطوة بخطوة على النحو التالي، مع إخراج إجابتك النهائية
            ككائن JSON واحد:


            # عملية الاستدلال:


            ## الخطوة 1: تصنيف الاستعلام

            افحص استعلام الموظف بعناية وصنفه إلى "محدد" أو "عام". يجب أن يستند هذا
            التصنيف إلى الاستعلام نفسه، **بغض النظر عن السياق المُقدم في هذه المرحلة.**


            * **محدد:** يتضمن الاستعلام إجراءً أو نية أو طلب معلومات واضحًا. عادةً
            ما يشير إلى موقف محدد ومفرد، أو يطلب معلومات محددة حول سياسة أو عملية.
            يمكن نظريًا الإجابة على استعلام محدد مباشرةً إذا توفرت معلومات كافية.
            * أمثلة:

            * "كيف أُحدِّث عنواني؟"

            * "ما هي سياسة الإجازات المرضية؟"

            * "أخبرني عن سياسة هدايا الموظفين."

            * "أحتاج إلى معرفة سعر الفائدة الخاص لطلبات قروض الموظفين."


            * **عام:** إذا كان الاستعلام غامضًا، أو واسع النطاق، أو قد يكون له أكثر
            من تفسير معقول، أو يفتقر إلى إجراء واضح أو طلب صريح. عادةً ما يكون كلمة
            واحدة أو عبارة واحدة بدون فعل واضح أو سؤال مباشر يطلب معلومات *محددة*.
            يتطلب الاستعلام العام توضيحًا قبل معالجته.

            * أمثلة:

            * "المزايا"

            * "هدية"

            * "مولود جديد"

            * "سعر خاص"


            * **إرشادات:** إذا كان من الممكن تفسير الاستعلام بشكل معقول بأكثر من طريقة،
            أو إذا كان يفتقر إلى إجراء واضح أو سؤال أو موضوع محدد، فصنِّفه دائمًا
            على أنه "عام" وامنح الأولوية لطلب التوضيح. الغموض يُفضِّل التصنيف "العام".


            ## الخطوة الثانية: معالجة الاستفسارات العامة

            إذا صُنِّف الاستفسار على أنه "عام"، **يجب عليك عدم محاولة الإجابة عليه.**
            بدلاً من ذلك، مهمتك الوحيدة هي صياغة سؤال توضيحي واضح ومهذب ومهني لفهم
            نية الموظف بدقة. لا تفترض أي شيء حول ما قد يقصده الموظف. صِغ السؤال بشكل
            محدد لتوجيه الموظف إلى تقديم التفاصيل اللازمة لتصنيف استفساره بشكل صحيح
            والإجابة عليه في المستقبل.


            * أمثلة على الأسئلة التوضيحية:

            * "هل يمكنك تحديد ما ترغب في معرفته بالضبط عن المزايا؟"

            * "هل يمكنك توضيح ما تقصده بـ "هدية"؟ هل تسأل عن سياسة هدايا الموظفين،
            أو عن تلقي الهدايا من العملاء، أو عن أي شيء آخر؟"

            * "هل يمكنك توضيح المعلومات التي تبحث عنها بخصوص "المولود الجديد"؟ هل
            تسأل عن إجازة الوالدين، أو عن المزايا المتعلقة بمولود جديد، أو عن أي شيء
            آخر؟"


            * "هل يمكنك تحديد نوع "السعر الخاص" الذي تستفسر عنه (مثلاً، أسعار الرهن
            العقاري، أسعار القروض، أسعار الودائع، إلخ)؟"


            ## الخطوة 3: معالجة الاستعلامات المحددة

            إذا صُنِّف الاستعلام على أنه "محدد"، فراجع مقتطفات السياق المُقدمة بالترتيب:
            السياق 1، السياق 2، والسياق 3.


            لكل مقتطف سياق:

            1. حدد ما إذا كان محتوى هذا المقتطف المحدد *ملائمًا* للإجابة على استفسار
            الموظف المحدد. تعني الملاءمة أن المقتطف يحتوي مباشرةً على معلومات تُساعد
            في معالجة الاستعلام.

            2. اشرح بإيجاز *لماذا* يكون السياق مناسبًا أو غير مناسب.

            3. بناءً على ملاءمته وضرورته لبناء إجابة شاملة ودقيقة *فقط* من المعلومات
            المُقدمة، حدد ما إذا كان *ينبغي* استخدام محتوى هذا المقتطف المحدد في إجابتك
            النهائية. يجب استخدامه فقط إذا كان مناسبًا ويساهم بشكل هادف في الإجابة.


            بعد مراجعة جميع السياقات، استخدم **جميع وفقط** المحتوى الذي يُعتبر "مفيدًا"
            وذا صلة مباشرة من السياقات لصياغة إجابة دقيقة ومحددة ومتوافقة مع السياسات
            قدر الإمكان. **يجب أن تكون إجابتك النهائية لأي استفسار مدعومة بالكامل
            بالمعلومات الموجودة في السياقات ذات الصلة ومضمنة فيها.** لا تُدخل أي معلومات
            غير موجودة في السياقات المُقدمة.



            حالة خاصة: سياق غير كافٍ:** إذا كان الاستفسار مُحددًا، ولكن لا يحتوي أيٌّ
            من مقتطفات السياق المُقدمة على معلومات ذات صلة للإجابة عليه، فيجب أن تُشير
            إجابتك النهائية بشكل احترافي إلى عدم قدرتك على العثور على المعلومات في
            الموارد المتاحة، ويجب عليك التوصية بالتواصل مع قسم علاقات الموظفين في
            قسم الموارد البشرية لمزيد من المساعدة على البريد الإلكتروني Personnel@bankboubyan.com.
            لا تُحاول الإجابة بناءً على افتراضات أو معلومات خارجية.



            ## الخطوة 4: صياغة الإجابة النهائية

            * إذا صُنِّف الاستعلام على أنه "عام"، فيجب أن تكون إجابتك النهائية بصيغة
            JSON هي سؤالك التوضيحي المُصاغ بعناية من الخطوة 2.

            * إذا صُنِّف الاستعلام على أنه "محدد"، فتصرف كخبير ذي معرفة واسعة مساعد
            افتراضي متعاون ومتعاطف، متخصص في تقديم دعم شامل للموظفين فيما يتعلق بمزاياهم
            وإجراءاتهم وسياساتهم ومعلوماتهم التنظيمية. مهمتك هي محاكاة حوارات طويلة
            ومتعددة الأدوار مع المستخدمين، مع ضمان أن تكون التفاعلات مفيدة ومفصلة
            وسهلة الاستخدام.


            الإرشادات:


            كن غنيًا بالمعلومات ودقيقًا: قدّم إجابات دقيقة بناءً على سياسات وإجراءات
            الموظفين المفصلة، مع الإشارة إلى تفاصيل ونطاقات محددة عند الاقتضاء.


            استخدم تعليمات واضحة خطوة بخطوة: عند شرح الإجراءات (مثل: عمليات التقديم،
            التحديثات)، قسّم الخطوات بوضوح ومنطقية.


            كن داعمًا ومشجعًا: أظهر تعاطفك، خاصةً فيما يتعلق بالأحداث الشخصية المهمة
            (مثل: الولادة، الزواج)، وقدّم المساعدة في التعامل مع الأنظمة أو الإجراءات.


            شارك في حوار متعدد الأدوار: مكّن المحادثة من التدفق بسلاسة عبر تبادلات
            متعددة، مما يسمح للمستخدمين بطرح أسئلة متابعة، وتوضيح شكوكهم، وطلب المزيد
            من التفاصيل.


            قدّم بيانات اتصال محددة: عند الاقتضاء، أدرج عناوين بريد إلكتروني محددة،
            أو مسارات بوابة، أو أسماء أنظمة.


            استخدم أسلوبًا ودودًا ومهنيًا: حافظ على أسلوب ودود، ومحترم، ومهني، يشجع
            المستخدمين على طرح الأسئلة براحة.


            كن صبورًا ومفصلًا: تجنب التسرع؛ تأكد من أن الإجابات شاملة بما يكفي لدعم
            المحادثات الطويلة والمعقدة.


            الآن، حلل استعلام الموظف التالي ومقتطفات السياق المُقدمة، وأخرج ردك ككائن
            JSON واحد وفقًا للمخطط المُحدد.

            '
        retry_config:
          max_retries: 6
          retry_enabled: true
          retry_interval: 1000
        selected: false
        structured_output:
          schema:
            $schema: http://json-schema.org/draft-07/schema#
            properties:
              classification:
                type: string
              contexts:
                items:
                  properties:
                    context 1:
                      properties:
                        1_relevant:
                          type: boolean
                        1_used:
                          type: boolean
                        1_why:
                          type: string
                      required:
                      - 1_relevant
                      - 1_why
                      - 1_used
                      type: object
                    context 2:
                      properties:
                        2_relevant:
                          type: boolean
                        2_used:
                          type: boolean
                        2_why:
                          type: string
                      required:
                      - 2_relevant
                      - 2_why
                      - 2_used
                      type: object
                    context 3:
                      properties:
                        3_relevant:
                          type: boolean
                        3_used:
                          type: boolean
                        3_why:
                          type: string
                      required:
                      - 3_relevant
                      - 3_why
                      - 3_used
                      type: object
                    context 4:
                      properties:
                        4_relevant:
                          type: boolean
                        4_used:
                          type: boolean
                        4_why:
                          type: string
                      required:
                      - 4_relevant
                      - 4_why
                      - 4_used
                      type: object
                    context 5:
                      properties:
                        5_relevant:
                          type: boolean
                        5_used:
                          type: boolean
                        5_why:
                          type: string
                      required:
                      - 5_relevant
                      - 5_why
                      - 5_used
                      type: object
                    context 6:
                      properties:
                        6_relevant:
                          type: boolean
                        6_used:
                          type: boolean
                        6_why:
                          type: string
                      required:
                      - 6_relevant
                      - 6_why
                      - 6_used
                      type: object
                  required:
                  - context 1
                  - context 2
                  - context 3
                  - context 4
                  - context 5
                  - context 6
                  type: object
                type: array
              final_answer:
                type: string
              why_type:
                type: string
            required:
            - classification
            - why_type
            - contexts
            - final_answer
            type: object
        structured_output_enabled: true
        title: الاجابة من قاعدة المعلومات
        type: llm
        variables: []
        vision:
          enabled: false
      height: 162
      id: '17460405924110'
      position:
        x: 7692.469866583229
        y: 776.6584000754925
      positionAbsolute:
        x: 7692.469866583229
        y: 776.6584000754925
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - '17460179285850'
          - result
        desc: ''
        memory:
          query_prompt_template: '{{#sys.query#}}'
          role_prefix:
            assistant: ''
            user: ''
          window:
            enabled: true
            size: 15
        model:
          completion_params: {}
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: bcbafb47-1213-4556-a4c7-5c599ceba176
          role: system
          text: 'أنت مساعد المحادثة الاحترافي لبنك بوبيان لسياسات الموارد البشرية
            الداخلية. إذا كان استفسار الموظف متعلقًا بالموارد البشرية، فأجب بأدب بأنك
            لا تملك معلومات كافية للإجابة. إذا لم يكن كذلك، فارفض الإجابة بأدب، مؤكدًا
            على أنك تجيب فقط على الاستفسارات المتعلقة بالموارد البشرية.


            هذا هو الاستفسار الذي تلقيته:

            '
        - id: 05228e82-6e62-4e93-8ce5-7f484e53e39f
          role: user
          text: '{{#context#}}'
        selected: false
        structured_output:
          schema:
            additionalProperties: false
            properties:
              final_answer:
                description: Your answer
                type: string
              hr_related:
                description: classify query either HR-related or not
                enum:
                - 'true'
                - 'false'
                type: string
            required:
            - hr_related
            - final_answer
            type: object
        structured_output_enabled: true
        title: الاجابة دون معلومات
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '17460438306840'
      position:
        x: 7692.469866583229
        y: 1001.955800152642
      positionAbsolute:
        x: 7692.469866583229
        y: 1001.955800152642
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\nimport re\n\ndef extract_json(text: str):\n    \"\"\"\n\
          \    Extracts and returns the first valid JSON object or array found within\
          \ the input text.\n    Returns None if no valid JSON is found.\n    \"\"\
          \"\n    json_pattern = re.compile(r'({.*?}|\\[.*?\\])', re.DOTALL)\n   \
          \ matches = json_pattern.findall(text)\n    for match in matches:\n    \
          \    try:\n            parsed_json = json.loads(match)\n            return\
          \ parsed_json\n        except json.JSONDecodeError:\n            continue\n\
          \    return None\n\ndef main(classification: str) -> dict:\n    \"\"\"\n\
          \    Processes various answer strings and returns a dictionary containing\
          \ the final result.\n    \"\"\"\n    def get_answer_value(value):\n    \
          \    # Helper to process each answer\n        if isinstance(value, dict):\n\
          \            return value.get('final_answer', value)\n        elif isinstance(value,\
          \ str):\n            try:\n                parsed = json.loads(value)\n\
          \                if isinstance(parsed, dict):\n                    return\
          \ parsed.get('final_answer', parsed)\n                else:\n          \
          \          return parsed\n            except json.JSONDecodeError:\n   \
          \             return value\n        else:\n            return value\n\n\
          \    if classification:\n        answer_data = get_answer_value(classification)\n\
          \        return {'result': str(answer_data)}\n    else:\n        return\
          \ {'result': \"عذراً. حدث خطأ مؤقت برجاء المحاولة في وقت لاحق.\"}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: التصنيف النهائي
        type: code
        variables:
        - value_selector:
          - '1746342059414'
          - structured_output
          variable: classification
      height: 53
      id: '1746342380538'
      position:
        x: 2291.686512738138
        y: 683.1138261701558
      positionAbsolute:
        x: 2291.686512738138
        y: 683.1138261701558
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: is
            id: 31019e32-f98a-4ddd-8545-02c2d90c371f
            value: Clear_Intent_Relates_to_Employee_Support
            varType: string
            variable_selector:
            - '1746342380538'
            - result
          id: 'true'
          logical_operator: and
        - case_id: 95e24648-4bd9-4a43-86ce-df41ee46f484
          conditions:
          - comparison_operator: is
            id: 9aac428c-04d6-423a-a3d5-1c382af494d6
            value: Clear_Intent_Does_Not_Relate_to_Employee_Support
            varType: string
            variable_selector:
            - '1746342380538'
            - result
          id: 95e24648-4bd9-4a43-86ce-df41ee46f484
          logical_operator: and
        - case_id: 5a777b83-87cf-4034-8249-6f0d391d4d46
          conditions:
          - comparison_operator: is
            id: 8cc1296b-7377-4ae7-a339-03cfa774a8e5
            value: Greeting
            varType: string
            variable_selector:
            - '1746342380538'
            - result
          id: 5a777b83-87cf-4034-8249-6f0d391d4d46
          logical_operator: and
        desc: ''
        selected: false
        title: حسب التصنيف
        type: if-else
      height: 221
      id: '1746342509345'
      position:
        x: 2316.776335761332
        y: 763.056458945072
      positionAbsolute:
        x: 2316.776335761332
        y: 763.056458945072
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - '1746016424681'
          - result
        desc: ''
        model:
          completion_params: {}
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: 22808a02-a379-4f82-b469-144c2dc0ed8c
          role: system
          text: "You are an HR assistant at Boubyan Bank. Boubyani is the bank’s official\
            \ employee application. Your task is to categorize employee inquiries\
            \ into one of the following categories, using a two-step process:\n\n\
            Step 1: Identify the Intent\n\nClear Intent: The inquiry contains a specific\
            \ request, question, or action (e.g., “How do I submit a leave request?”\
            \ “How many days I can work remotely per week?”).\nVague Intent: The inquiry\
            \ is a keyword or sentence without a clear question or actionable request\
            \ (e.g., “Leave policy,” “Benefits,” “Bank statement”, \"what is remote\
            \ work policy\", \"salary advance policies\").\n\nStep 2: If the intent\
            \ is 'Clear Intent' only, determine if it relates to Employee Support:\n\
            \n# Relates to Employee Support: If the inquiry or request directly pertains\
            \ to managing any aspect of the entire employee lifecycle, from initial\
            \ recruitment and onboarding through ongoing support, development, and\
            \ ultimately, offboarding. It may encompass a wide range of needs and\
            \ processes, including interaction with our internal Boubyani application\
            \ and broader benefits management. The scope includes inquiries and requests\
            \ related to anything occurring throughout an employee's journey with\
            \ the company, covering financial, personal, and family-related support.\n\
            \nHere's a breakdown of some possibilities:\n\n- Recruitment & Onboarding:\
            \ This phase focuses on the initial hiring process and integration of\
            \ new employees. Examples of inquiries include:\n\nSalary Certificate\
            \ Requests: Needed for bank account setup, loan applications, and other\
            \ personal financial matters.\nProbation Updates: Confirming probation\
            \ periods, completion milestones, and associated HR actions.\nOnboarding\
            \ Support: Guidance on essential onboarding tasks, systems access, and\
            \ initial training.\n\n- Ongoing Support & Benefits (Financial & Personal):\
            \ This covers the everyday needs of employees while they are actively\
            \ employed. Examples include:\n\nFinancial Well-being:\nBanking & Salary\
            \ Administration: Changes to bank accounts, salary inquiries, payment\
            \ discrepancies, and salary statements.\nPersonal Financing (Qardh Hasan):\
            \ Inquiries about interest-free loan programs and repayment schedules.\n\
            Credit Cards: Access to company-sponsored credit card programs and associated\
            \ benefits.\nSalary Advances: Requests for short-term financial assistance.\n\
            \nPersonal Benefits:\nAir Ticket Allowance: Inquiries about eligibility,\
            \ booking procedures, and associated terms.\nMedical Insurance: Questions\
            \ about coverage details, enrollment, claims processing, and family plan\
            \ options.\nMarriage & Newborn Gifts: Understanding eligibility and receiving\
            \ details regarding these celebratory benefits.\nChild’s Education Assistance:\
            \ Questions about financial support programs for employee's children’s\
            \ education.\nLeave Management: This is a crucial element of employee\
            \ wellbeing and compliance.\nAzaa (Death leave): Information about allowed\
            \ leaves for relatives deaths.\nMaternity Leave: Eligibility, entitlements,\
            \ and related processes.\nHajj Leave: Eligibility and procedures for taking\
            \ leave to perform Hajj.\nPaternity Leave: Eligibility and booking processes.\n\
            Sick Leave: Entitlement, proof of illness requirements, and related policies.\n\
            Annual Leave: Accrual rates, booking procedures, and carry-over policies.\n\
            \n- Career Development & Performance: This focuses on supporting employee\
            \ growth and recognizing their contributions. Examples include:\n\nKey\
            \ Performance Indicators (KPIs): Clarification on individual and team\
            \ KPIs and their impact on performance evaluations.\nJob Descriptions:\
            \ Access to accurate and updated job descriptions.\nInternal Postings:\
            \ Guidance on applying for internal job openings and career advancement\
            \ opportunities.\nCareer Paths: Understanding potential career progression\
            \ within the company.\nPerformance Reviews: Guidance on the review process,\
            \ feedback interpretation, and goal setting.\nTraining Programs: Information\
            \ about available training opportunities, enrollment procedures, and skill\
            \ development initiatives.\nMerit Cycles & Increases: Understanding the\
            \ process for salary adjustments based on performance.\n\n- Offboarding\
            \ & Departure: This encompasses the process of separating an employee\
            \ from the company while ensuring compliance and resolving outstanding\
            \ matters. Examples include:\n\nResidency Renewals: Assistance with paperwork\
            \ and processes related to employee residency permits.\nWork Permits:\
            \ Processing and renewal of work permits.\nFinal Salary & Settlements:\
            \ Understanding final pay calculations and outstanding benefits.\nReturn\
            \ of Company Property: Procedures for returning company assets.\n\n# Does\
            \ Not Relate to Employee Support: Any question completely unrelated to\
            \ employee lifecycle, such as recreation, food, lodging, or general casual\
            \ conversation.\n\n# Greeting: If the query is just a simple greeting\n\
            \nFinal Categories:\n\nClear Intent – Relates to Employee Support\nClear\
            \ Intent – Does Not Relate to Employee Support\nVague Intent\nGreeting\n\
            \nExamples:\n\n“How do I submit a leave request?” ⇒ Clear Intent – Relates\
            \ to Employee Support\n“What are the recreational spots in Kuwait?” ⇒\
            \ Clear Intent – Does Not Relate to Employee Support\n“Leave policy” ⇒\
            \ Vague Intent\n“Benefits” ⇒ Vague Intent\n“Payroll Schedule” ⇒ Vague\
            \ Intent\n“Can I register for the company's trainings?” ⇒ Clear Intent\
            \ – Relates to Employee Support\n“How do I use the Boubyani app?” ⇒ Clear\
            \ Intent – Relates to Employee Support\n“need residency renewal policy”\
            \ ⇒ Vague Intent\n“internal jobs policies” ⇒ Vague Intent\n“qardh hasan\
            \ loan policy” ⇒ Vague Intent\n\"hey!\" ⇒ Greeting\n\nWorkflow:\n\nAsk\
            \ yourself: Is it a greeting? If yes classify as Greeting. If no, ask\
            \ yourself: Does the inquiry contain a specific question or request?\n\
            If no ⇒ Vague Intent.\nIf yes ⇒ Proceed to Step 2.\nDoes the request or\
            \ question pertain to employee-related matters?\nIf yes ⇒ Clear Intent\
            \ – Relates to Employee Support.\nIf no ⇒ Clear Intent – Does Not Relate\
            \ to Employee Support.\n\nProvide a JSON structured output with the final\
            \ categorization:\n\n{\n  \"Greeting\": \"Yes\" or \"No\",\n  \"intent_clarity\"\
            : \"Clear Intent\" or \"Vague Intent\",\n  \"clarity_reason\": \"Explain\
            \ why you chose it (Does the inquiry contain a clear request or question?\
            \ Or is it unclear and needs clarification?)\",\n  \"action_if_ambiguous\"\
            : \"If you classify it as vague intent: What would you ask the employee\
            \ to clarify their intent? If it is clear, write N/A\",\n  \"about_hr\"\
            : \"Relates to Employee Support\", \"Does Not Relate to Employee Support\"\
            , or \"N/A\",\n  \"about_hr_reason\": \"Explain why you considered the\
            \ inquiry to be related to employee support, other, or inapplicable if\
            \ it had an ambiguous intent.\",\n  \"final_answer\": \"Clear_Intent_Relates_to_Employee_Support\"\
            , \"Clear_Intent_Does_Not_Relate_to_Employee_Support\", \"Greeting\" or\
            \ \"Vague_intent\"\n}\n\nInquiry:"
        - id: cf1f4031-1f4e-48a6-8151-d381a8e436ca
          role: user
          text: '{{#context#}}'
        retry_config:
          max_retries: 6
          retry_enabled: true
          retry_interval: 1686
        selected: false
        structured_output:
          schema:
            additionalProperties: false
            properties:
              Greeting:
                description: Is the query a greeting?
                enum:
                - 'Yes'
                - 'No'
                type: string
              about_hr:
                description: 'If the intention is clear: Is the question actually
                  related to employee lifecycle/employee policies or is it related
                  to another area?'
                enum:
                - Relates to Employee Support
                - Does Not Relate to Employee Support
                - N/A
                type: string
              about_hr_reason:
                description: Explain why you considered the inquiry to be related
                  to employee support, other, or inapplicable if it had an ambiguous
                  intent.
                type: string
              action_if_ambiguous:
                description: 'If you classify it as vague intent: What would you ask
                  the employee to clarify their intent? If it is clear, write N/A'
                type: string
              clarity_reason:
                description: Explain why you chose it (Does the inquiry contain a
                  clear request or question? Or is it unclear and needs clarification?)
                type: string
              final_answer:
                description: 'Write the final classification for only one of these
                  options: (Clear Intent – Relates to Employee Support, Clear Intent
                  – Does Not Relate to Employee Support, Vague Intent)'
                enum:
                - Clear_Intent_Relates_to_Employee_Support
                - Clear_Intent_Does_Not_Relate_to_Employee_Support
                - Greeting
                - VagueIntent
                type: string
              intent_clarity:
                description: Is the question or request clear (clear intent) or is
                  it just a word or phrase without a specific purpose or explicit
                  request (vague intent)?
                enum:
                - Clear Intent
                - Vague Intent
                type: string
            required:
            - intent_clarity
            - clarity_reason
            - action_if_ambiguous
            - about_hr
            - about_hr_reason
            - final_answer
            - Greeting
            type: object
        structured_output_enabled: true
        title: query classify
        type: llm
        variables: []
        vision:
          enabled: false
      height: 120
      id: '17463502700320'
      position:
        x: 2642.8826463461137
        y: -432.65666265485135
      positionAbsolute:
        x: 2642.8826463461137
        y: -432.65666265485135
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\nimport re\n\ndef extract_json(text: str):\n    \"\"\"\n\
          \    Extracts and returns the first valid JSON object or array found within\
          \ the input text.\n    Returns None if no valid JSON is found.\n    \"\"\
          \"\n    json_pattern = re.compile(r'({.*?}|\\[.*?\\])', re.DOTALL)\n   \
          \ matches = json_pattern.findall(text)\n    for match in matches:\n    \
          \    try:\n            parsed_json = json.loads(match)\n            return\
          \ parsed_json\n        except json.JSONDecodeError:\n            continue\n\
          \    return None\n\ndef main(classification: str) -> dict:\n    \"\"\"\n\
          \    Processes various answer strings and returns a dictionary containing\
          \ the final result.\n    \"\"\"\n    def get_answer_value(value):\n    \
          \    # Helper to process each answer\n        if isinstance(value, dict):\n\
          \            return value.get('final_answer', value)\n        elif isinstance(value,\
          \ str):\n            try:\n                parsed = json.loads(value)\n\
          \                if isinstance(parsed, dict):\n                    return\
          \ parsed.get('final_answer', parsed)\n                else:\n          \
          \          return parsed\n            except json.JSONDecodeError:\n   \
          \             return value\n        else:\n            return value\n\n\
          \    if classification:\n        answer_data = get_answer_value(classification)\n\
          \        return {'result': str(answer_data)}\n    else:\n        return\
          \ {'result': \"عذراً. حدث خطأ مؤقت برجاء المحاولة في وقت لاحق.\"}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: final classify
        type: code
        variables:
        - value_selector:
          - '17463502700320'
          - structured_output
          variable: classification
      height: 53
      id: '17463503644830'
      position:
        x: 2734.5500578992446
        y: -283.98303827522216
      positionAbsolute:
        x: 2734.5500578992446
        y: -283.98303827522216
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: is
            id: 31019e32-f98a-4ddd-8545-02c2d90c371f
            value: Clear_Intent_Relates_to_Employee_Support
            varType: string
            variable_selector:
            - '17463503644830'
            - result
          id: 'true'
          logical_operator: and
        - case_id: 95e24648-4bd9-4a43-86ce-df41ee46f484
          conditions:
          - comparison_operator: is
            id: 9aac428c-04d6-423a-a3d5-1c382af494d6
            value: Clear_Intent_Does_Not_Relate_to_Employee_Support
            varType: string
            variable_selector:
            - '17463503644830'
            - result
          id: 95e24648-4bd9-4a43-86ce-df41ee46f484
          logical_operator: and
        - case_id: 6cb35916-2fd4-4275-8e6d-6d24b6b13f83
          conditions:
          - comparison_operator: is
            id: 520f8784-0ad7-4118-b7db-f359af1e5d36
            value: Greeting
            varType: string
            variable_selector:
            - '17463503644830'
            - result
          id: 6cb35916-2fd4-4275-8e6d-6d24b6b13f83
          logical_operator: and
        desc: ''
        selected: false
        title: per classification
        type: if-else
      height: 221
      id: '17463504203540'
      position:
        x: 2734.5500578992446
        y: -181.42077294774904
      positionAbsolute:
        x: 2734.5500578992446
        y: -181.42077294774904
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import json\n\ndef main(intent_json: dict) -> dict:\n    final_query\
          \ = intent_json.get(\"final_query\")  \n    \n    return {\n        \"cleaned_intent\"\
          : final_query,\n    }"
        code_language: python3
        desc: ''
        outputs:
          cleaned_intent:
            children: null
            type: string
        selected: false
        title: Get Final Intent
        type: code
        variables:
        - value_selector:
          - '1739860244710'
          - structured_output
          variable: intent_json
      height: 53
      id: '1747824909408'
      position:
        x: 2020.0921003036065
        y: -181.42077294774904
      positionAbsolute:
        x: 2020.0921003036065
        y: -181.42077294774904
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import re\n\ndef main(non_hr_related: str) -> str:\n    # Remove all\
          \ tags and their content\n    cleaned_non_hr_related = re.sub(r'<.*?>.*?</.*?>',\
          \ '', non_hr_related, flags=re.DOTALL)\n\n    cleaned_non_hr_related = cleaned_non_hr_related.strip()\n\
          \    cleaned_non_hr_related = str(cleaned_non_hr_related)\n    return {\n\
          \        \"result\": cleaned_non_hr_related,\n    }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Remove tag
        type: code
        variables:
        - value_selector:
          - '1746015679959'
          - text
          variable: non_hr_related
      height: 53
      id: '1747908419220'
      position:
        x: 3457.5579689242863
        y: 270.061433932692
      positionAbsolute:
        x: 3457.5579689242863
        y: 270.061433932692
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import re\n\ndef extract_question(text):\n    \"\"\"\n    Extracts\
          \ the question from a string formatted as \"question:QUESTION \\nanswer:ANSWER\"\
          .\n    Args:\n        text: The input string containing the question and\
          \ answer.\n    Returns:\n        The extracted question as a string, or\
          \ None if no question is found.\n    \"\"\"\n    match = re.search(r\"question:(.*)\\\
          n\", text)\n    if match:\n        return match.group(1).strip()\n    else:\n\
          \        return None\n\ndef main(KBanswer: dict) -> str:\n    questions\
          \ = []  # List to accumulate questions\n    \n    for each in KBanswer:\n\
          \        # Remove all keys except 'content'\n        each = {'content':\
          \ each['content']}\n        text = each.get('content')\n        if text:\n\
          \            question = extract_question(text)\n            if question:\n\
          \                questions.append(question)  # Add extracted question to\
          \ the list\n    \n    result = '\\n'.join(f'- {question}' for question in\
          \ questions)\n    return {'result': result}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Get Questions
        type: code
        variables:
        - value_selector:
          - '1748414761482'
          - result
          variable: KBanswer
      height: 53
      id: '1748414814447'
      position:
        x: 3384.6930797305236
        y: 57.20861887567773
      positionAbsolute:
        x: 3384.6930797305236
        y: 57.20861887567773
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import re\nimport random\n\n# List of suggested phrases\nsuggested_phrases\
          \ = [\n    \"Your question is quite general; here are some more targeted\
          \ inquiries you might consider:\",\n    \"This topic is a bit expansive;\
          \ let’s explore some specific questions that could help:\",\n    \"Your\
          \ request covers a lot of ground; perhaps these more focused questions will\
          \ better suit your needs:\",\n    \"This inquiry is a tad wide-reaching;\
          \ might I suggest some more precise questions for clarity?\",\n    \"Your\
          \ query is somewhat broad; here are some specific topics to consider for\
          \ a deeper dive:\",\n    \"The question you've posed is a little vague;\
          \ let's refine it with some specific ideas:\",\n    \"This is an extensive\
          \ topic! Try asking about these narrower aspects for more tailored insights:\"\
          ,\n    \"Your current question is broad in scope; here are some suggestions\
          \ for more precise inquiries:\",\n    \"This subject area is quite vast;\
          \ consider these specific questions for more effective assistance:\",\n\
          \    \"Your inquiry is on the larger side; perhaps focusing on these specific\
          \ aspects could help:\",\n    \"This is a wide-ranging query; let’s narrow\
          \ it down with some specific questions:\",\n    \"The inquiry you’ve made\
          \ is a touch broad; here are some specific angles you could explore:\",\n\
          \    \"Your request is comprehensive; let's dig deeper with these more detailed\
          \ questions:\",\n    \"This topic covers a lot of territory; here are some\
          \ more focused queries that might help:\",\n    \"Your question spans a\
          \ large area; how about these specific inquiries for better clarity:\",\n\
          \    \"This is a bit of a sweeping question; let me propose some targeted\
          \ queries for you:\",\n    \"The inquiry you’ve posed is fairly broad; consider\
          \ these specific angles for more insight:\",\n    \"Your question is rather\
          \ generalized; here are some specific paths you could take:\",\n    \"This\
          \ is quite a broad topic; let’s hone in on specific questions for clearer\
          \ understanding:\",\n    \"Your inquiry is a bit overarching; how about\
          \ these precise questions for more direction?\",\n    \"This query has a\
          \ broad reach; exploring these specific questions could yield better results:\"\
          ,\n    \"Your question is wide-ranging; check out these specific inquiries\
          \ for a deeper understanding:\",\n    \"This topic is expansive; let’s look\
          \ into these specific areas for more focused help:\",\n    \"Your request\
          \ is a bit broad; let me suggest these more precise queries for clarity:\"\
          ,\n    \"This is a rather vast subject; perhaps these specific questions\
          \ will refine your focus:\",\n    \"Your inquiry is quite general; consider\
          \ these specific angles for better results:\",\n    \"This topic spans a\
          \ wide spectrum; let’s narrow it with these targeted questions:\",\n   \
          \ \"Your request is broad in nature; here are some more focused options\
          \ for exploration:\",\n    \"This is a wide open question; let's dive deeper\
          \ with some specific inquiries:\",\n    \"Your query is fairly comprehensive;\
          \ here are some focused questions to guide you:\",\n    \"This topic includes\
          \ many facets; consider these specific inquiries for more clarity:\",\n\
          \    \"Your initial question is broad; how about refining it with these\
          \ specific queries?\",\n    \"This is a wide-ranging inquiry; let’s narrow\
          \ it down with some specific suggestions:\",\n    \"Your question covers\
          \ a large area; maybe these specific topics will help focus your search:\"\
          ,\n    \"This is a broad subject matter; here are some precise questions\
          \ you might investigate:\",\n    \"Your inquiry is quite expansive; check\
          \ out these targeted questions for deeper insights:\",\n    \"This topic\
          \ is fairly wide; let’s drill down with some specific lines of questioning:\"\
          ,\n    \"Your question is broad-based; consider these specific inquiries\
          \ to clarify your thoughts:\",\n    \"This query has a general scope; let's\
          \ see if these specific questions can guide us better:\",\n    \"Your inquiry\
          \ embraces a lot; how about focusing it down with these specific queries?\"\
          ,\n    \"This is a rather broad subject; let’s explore more specific questions\
          \ for clarity:\",\n    \"Your request is somewhat vast; here are some narrow\
          \ questions that could help:\",\n    \"This topic spans quite a bit; let’s\
          \ focus on specific areas for more directed insight:\",\n    \"Your question\
          \ is broad in nature; consider diving into these specific angles:\",\n \
          \   \"This is a broad inquiry; here are some refined questions to assist\
          \ you:\",\n    \"Your question covers a wide area; how about these specific\
          \ queries for better clarity?\",\n    \"This topic seems broad; let’s explore\
          \ specific questions for a clearer perspective:\",\n    \"Your inquiry is\
          \ on the general side; here are some more specific lines of thought:\",\n\
          \    \"This is quite a broad question; let’s look at these specific inquiries\
          \ to narrow it down:\",\n    \"Your query is expansive; here are some targeted\
          \ questions to focus your search:\"\n]\n\nno_kb_ideas = [\n\"I appreciate\
          \ your inquiry, but I need more details to assist you effectively.\",\n\"\
          Thank you for reaching out! Could you please provide more context for your\
          \ question?\",\n\"I'm here to help, but I need a little more information\
          \ to understand your needs better.\",\n\"I understand you have a question,\
          \ but could you elaborate a bit more for clarity?\",\n\"Your query is important\
          \ to me, and I want to ensure I provide the best support. Could you expand\
          \ on it?\",\n\"I currently don't have specific information on that, but\
          \ I'm eager to learn more about your concern.\",\n\"Could you give me more\
          \ background on your question so I can assist you better?\",\n\"I'm here\
          \ to help! More details would really help me provide a more accurate response.\"\
          ,\n\"Thank you for your inquiry! Can you specify exactly what you're looking\
          \ for?\",\n\"I want to help you, but I need a clearer understanding of your\
          \ issue. Could you provide more specifics?\",\n\"Could you clarify your\
          \ question a bit further? I'd love to assist you more effectively.\",\n\"\
          I currently lack the necessary information to assist with your query; could\
          \ you elaborate more?\",\n\"It's great to hear from you. Could you tell\
          \ me more about what you need help with?\",\n\"I truly want to assist you,\
          \ but I need a bit more information to move forward.\",\n\"Thank you for\
          \ your message! Could you specify what aspect you're inquiring about?\"\
          ,\n\"I appreciate your contact! More details would ensure I direct you correctly.\"\
          ,\n\"To better assist you, could you elaborate on your question a little\
          \ more?\",\n\"I want to ensure I help you appropriately; can you provide\
          \ further information?\",\n\"I’m here to support you. Could you explain\
          \ your question in a bit more detail?\",\n\"Thank you for your inquiry;\
          \ could you expand on the specifics of your question?\",\n\"I'm eager to\
          \ help but need a clearer picture to provide accurate support. Could you\
          \ clarify?\",\n\"Your question is valuable. Can you provide additional details\
          \ for me to assist you better?\",\n\"Could you share more about what you're\
          \ seeking clarification on? I'm here to help!\",\n\"I'd love to assist you\
          \ but need more context to provide a relevant answer.\",\n\"I'm here for\
          \ you! A bit more detail could help pinpoint the information you're looking\
          \ for.\",\n\"Let’s work together on this! Could you elaborate on your initial\
          \ query?\",\n\"Your inquiry is noted. For a better response, could you clarify\
          \ your requests?\",\n\"I appreciate your question! Could you provide specific\
          \ details to guide my response?\",\n\"Your clarity means a lot! Please share\
          \ more details about your inquiry.\",\n\"I'm looking forward to helping\
          \ you, but I need a clearer insight into your question.\",\n\"Could you\
          \ provide more specifics or context? I want to assist you to the best of\
          \ my ability.\",\n\"I'm here to help, but I need a bit more clarity on your\
          \ question. Can you elaborate?\",\n\"I want to make sure I address your\
          \ needs properly; could you provide more context?\",\n\"Your message is\
          \ important to me! Could you expand on your question for better assistance?\"\
          ,\n\"I'm eager to assist but need a bit more insight into your concern.\
          \ Can you clarify?\",\n\"I’m here to support you fully. A little more detail\
          \ could empower our conversation.\",\n\"Thank you for your query! Can you\
          \ provide specific areas you're unsure about?\",\n\"I appreciate your outreach!\
          \ Could you share a bit more about your question?\",\n\"I want to ensure\
          \ I guide you accurately, so any additional detail would be helpful.\",\n\
          \"I’m here to help! A few more details about your question will go a long\
          \ way.\",\n\"Your input is valued! Please share what specifics you are looking\
          \ for to assist you better.\",\n\"I’m interested in helping you! Could you\
          \ explain what aspects you’re inquiring about?\",\n\"Thank you for reaching\
          \ out! More information will allow me to give a detailed response.\",\n\"\
          I want to assist you as effectively as possible. Can you clarify your inquiry?\"\
          ,\n\"Could you provide me with more details? I’m ready to help clarify your\
          \ concerns.\",\n\"I am keen on helping you, but I need more specifics to\
          \ ensure I give a thorough reply.\",\n\"I would love to assist! Can you\
          \ expand on what you're looking for?\",\n\"Thank you for your message. Can\
          \ you provide additional details to guide my support?\"\n]\n\n\n\n\ndef\
          \ main(rephrase_request: str) -> str:\n    # Remove all tags and their content\n\
          \    cleaned_rephrase_request = re.sub(r'<.*?>.*?</.*?>', '', rephrase_request,\
          \ flags=re.DOTALL)\n    cleaned_rephrase_request = cleaned_rephrase_request.strip()\n\
          \    \n    # Choose a random phrase from the suggested phrases\n    random_phrase\
          \ = random.choice(suggested_phrases)\n    \n    if cleaned_rephrase_request:\n\
          \        # Create the final result by combining the random phrase and cleaned\
          \ request\n        result = f\"{random_phrase}\\n\\n{cleaned_rephrase_request}\"\
          \n    else:\n        no_kb = random.choice(no_kb_ideas)\n        result\
          \ = no_kb\n\n    return {\n        \"result\": result,\n    }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: Remove Tag
        type: code
        variables:
        - value_selector:
          - '1748414814447'
          - result
          variable: rephrase_request
      height: 53
      id: '1748414874400'
      position:
        x: 3689.693079760571
        y: 57.20861887567773
      positionAbsolute:
        x: 3689.693079760571
        y: 57.20861887567773
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import re\n\ndef extract_question(text):\n    \"\"\"\n    Extracts\
          \ the question from a string formatted as \"question:QUESTION \\nanswer:ANSWER\"\
          .\n    Args:\n        text: The input string containing the question and\
          \ answer.\n    Returns:\n        The extracted question as a string, or\
          \ None if no question is found.\n    \"\"\"\n    match = re.search(r\"question:(.*)\\\
          n\", text)\n    if match:\n        return match.group(1).strip()\n    else:\n\
          \        return None\n\ndef main(KBanswer: dict) -> str:\n    questions\
          \ = []  # List to accumulate questions\n    \n    for each in KBanswer:\n\
          \        # Remove all keys except 'content'\n        each = {'content':\
          \ each['content']}\n        text = each.get('content')\n        if text:\n\
          \            question = extract_question(text)\n            if question:\n\
          \                questions.append(question)  # Add extracted question to\
          \ the list\n    \n    result = '\\n'.join(f'- {question}' for question in\
          \ questions)\n    return {'result': result}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: استخلاص الاستعلامات
        type: code
        variables:
        - value_selector:
          - '1748426591842'
          - result
          variable: KBanswer
      height: 53
      id: '1748426676928'
      position:
        x: 3002.4315002512394
        y: 827.8318516656984
      positionAbsolute:
        x: 3002.4315002512394
        y: 827.8318516656984
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import re\nimport random\n\n# List of suggested phrases\nsuggested_phrases\
          \ = [\n    \"سؤالك عام نوعًا ما؛ إليك بعض الاستفسارات الأكثر تحديداً التي\
          \ يمكنك التفكير فيها:\",\n    \"هذا الموضوع واسع بعض الشيء؛ دعنا نستكشف\
          \ بعض الأسئلة المحددة التي قد تساعدك:\",\n    \"طلبك يغطي مجالًا واسعًا؛\
          \ ربما تناسب هذه الأسئلة الأكثر تركيزًا احتياجاتك بشكل أفضل:\",\n    \"\
          هذا الاستفسار واسع النطاق بعض الشيء؛ هل يمكنني اقتراح بعض الأسئلة الأكثر\
          \ دقة للتوضيح؟\",\n    \"سؤالك واسع نوعًا ما؛ إليك بعض المواضيع المقترحة\
          \ للتعمق أكثر:\",\n    \"السؤال الذي طرحته غامض بعض الشيء؛ دعنا نحسّنه ببعض\
          \ الأفكار المحددة:\",\n    \"هذا موضوع واسع! إليك أسئلة محددة أكثر يمكنك\
          \ استخدامها للحصول على إجابات أكثر تفصيلًا:\",\n    \"سؤالك الحالي واسع\
          \ النطاق؛ إليك بعض الاقتراحات لاستفسارات أكثر دقة:\",\n    \"مجال السؤال\
          \ واسع جدًا! هذه بعض الأسئلة المحددة لأساعدك بشكل أكثر فاعلية:\",\n    \"\
          استفسارك يمكن أن يُفسّر بأكثر من طريقة! ربما قد يساعدك التركيز على هذه الجوانب:\"\
          ,\n    \"هذا استفسار واسع النطاق؛ دعنا نحدده ببعض الأسئلة:\",\n    \"استفسارك\
          \ يغطي أكثر من جانب؛ إليك بعض الجوانب المحددة التي يمكنك استكشافها:\",\n\
          \    \"طلبك شامل؛ دعنا نتعمق أكثر مع هذه الأسئلة الأكثر تفصيلاً:\",\n  \
          \  \"يغطي هذا الموضوع مجالات واسعة؛ إليك بعض الاستفسارات الأكثر تركيزًا\
          \ التي قد تساعدك:\",\n    \"سؤالك يشمل احتمالات متعددة؛ ما رأيك في هذه الاستفسارات\
          \ المحددة لمزيد من الوضوح؟\",\n    \"هذا سؤال شامل نوعًا ما؛ دعني أقترح\
          \ عليك بعض الاستفسارات المحددة:\",\n    \"استفسارك يحتمل أكثر من تفسير!\
          \ هل ترى أي من هذه الأسئلة محدداً أكثر؟\",\n    \"سؤالك عام نوعًا ما؛ إليك\
          \ بعض المسارات المحددة التي يمكنك اتباعها:\",\n    \"هذا موضوع واسع جدًا؛\
          \ دعنا نركز على أسئلة محددة لفهم أشمل:\",\n    \"استفسارك شامل نوعًا ما؛\
          \ ما رأيك في هذه الأسئلة المحددة ليمكنني فهمك أكثر؟\",\n    \"هذا الاستفسار\
          \ واسع النطاق؛ هذه الأسئلة المحددة قد تؤدي إلى نتائج أفضل:\",\n    \"أرى\
          \ أن السؤال المطروح له أكثر من وجه! ما رايك في هذه الاقتراحات المحددة؟\"\
          ,\n    \"هذا الموضوع واسع النطاق؛ دعنا نتناول هذه المجالات المحددة للحصول\
          \ على مساعدة أكثر تركيزًا:\",\n    \"طلبك غير محدد نوعًا ما؛ اسمح لي أن\
          \ أقترح هذه الاستفسارات الأكثر دقة للتوضيح:\",\n    \"هذا موضوع كبير.. ربما\
          \ تجد هذه الأسئلة المحددة أكثر قرباً لما تحتاج:\",\n    \"سؤالك عام جدًا؛\
          \ خذ هذه الجوانب المحددة في الاعتبار للحصول على نتائج أفضل:\",\n    \"يغطي\
          \ هذا الموضوع نطاقًا واسعًا؛ دعنا نحدده بهذه الأسئلة المحددة:\",\n    \"\
          طلبك واسع النطاق؛ إليك بعض الخيارات الأكثر تركيزًا التي ربما تجدها قادرة\
          \ على مساعدتك أكثر:\",\n    \"هذا سؤال مفتوح قليلاً.. دعنا نتعمق أكثر مع\
          \ بعض الاستفسارات المحددة:\",\n    \"سؤالك شامل نوعًا ما؛ إليك بعض الأسئلة\
          \ المحددة لإرشادك:\",\n    \"يشمل هذا الموضوع جوانب متعددة؛ هل تجد في أي\
          \ من الاستفسارات التالية ما تحتاجه؟\",\n    \"سؤالك الأول واسع النطاق؛ ما\
          \ رأيك في تحسينه بهذه الاستفسارات المحددة؟\",\n    \"إذا تمكنت من فهمك أكثر\
          \ فقد أستطيع مساعدتك أفضل! بعض الاقتراحات المحددة:\",\n    \"ساعدني على\
          \ فهمك أكثر.. ربما تساعدك هذه المواضيع المحددة في تركيز بحثك:\",\n    \"\
          ربما لم أستطع فهم مقصدك بوضوح..  إليك بعض الأسئلة المحددة التي يمكنك البحث\
          \ فيها:\",\n    \"دعني أقترح عليك هذه الأسئلة المحددة لمزيد من التعمق في\
          \ الموضوع الذي طرحته:\",\n    \"هذا الموضوع واسع النطاق؛ دعنا نتعمق فيه\
          \ ببعض الأسئلة المحددة:\",\n    \"أعتقد أن سؤالك بحاجة إلى مزيد من التحديد..\
          \ إليك بعض الأبعاد التي يمكنك التفكير فيها:\",\n    \"هذا الموضوع يبدو معقدًا\
          \ قليلاً! دعنا نستعرض بعض الأسئلة الدقيقة التي قد تسهل عليك الأمر:\",\n\
          \    \"طلبك يحتوي على تفاصيل كثيرة.. قد تهمك هذه الأسئلة المستهدفة لمزيد\
          \ من الوضوح:\",\n    \"استفسارك شامل.. هل يمكنني اقتراح بعض النقاط المحددة\
          \ التي قد تساعدنا؟\",\n    \"هذا سؤال عام نسبيًا.. دعنا نحاول تحديده ببعض\
          \ الجوانب الإضافية:\",\n    \"الموضوع الذي تتحدث عنه واسع.. إليك بعض الأسئلة\
          \ المحددة التي قد تساعدنا في التركيز:\",\n    \"سؤالك يحتوي على عدة احتمالات..\
          \ لم لا نحاول استخدام هذه الأسئلة لتفصيله قليلاً:\",\n    \"هذا الاستفسار\
          \ يمكن أن يتمحور حول عدة محاور.. دعنا نستعرض بعض الأسئلة التي قد تساعدنا\
          \ على بدء الحوار:\",\n    \"سؤالك يحتاج إلى توضيح إضافي.. إليك بعض الجوانب\
          \ التي قد تساعدنا في فهم هدفك من طرح هذا السؤال:\",\n    \"يبدو أن هذا السؤال\
          \ له احتمالات عديدة.. إليك بعض النقاط لتركيز النقاش أكثر:\",\n    \"سؤالك\
          \ عام.. لنقم بجعله خاصاً ومحدداً ببعض الأسئلة. اختر منها سؤالاً:\",\n  \
          \  \"هذا السؤال يمكن أن ننظر إليه من الكثير من الزوايا.. إليك بعض الأسئلة\
          \ الدقيقة كي تحصل على وجهات نظر مختلفة:\",\n    \"استفسارك واسع جدًا.. إليك\
          \ بعض الاقتراحات المحددة لتفصيل المعلومات:\",\n    \"هذا موضوع كبير.. دعنا\
          \ نعيد صياغة الأمر ببعض الأسئلة المحددة:\",\n    \"سؤالك غامض بعض الشيء..\
          \ ما رأيك في استخدام هذه الأسئلة الدقيقة لمزيد من الاختصار؟\",\n    \"هذا\
          \ الاستفسار يحمل في طياته الكثير من الفروع.. ما رأيك في هذه النقاط المحددة؟\"\
          ,\n    \"استفسارك يتطلب المزيد من التركيز.. ربما تُساعد هذه الأسئلة في توضيح\
          \ الصورة:\",\n    \"هذا الموضوع متشعب قليلاً.. لنستكشف بعض الأسئلة الأكثر\
          \ دقة للحصول على فهم أعمق:\",\n    \"هذا النقاش يتطلب تفصيلاً.. إليك بعض\
          \ الاستفسارات التي قد تفيدك:\",\n    \"سؤالك لا يبدو محدداً.. ما رأيك في\
          \ دراسة هذه الجوانب للحصول على رؤية أوضح؟\",\n    \"طلبك غير محدد بشكل دقيق..\
          \ دعني أساعدك بأسئلة قد تكون أكثر إفادة:\",\n    \"هذا الاستفسار واسع..\
          \ ربما يجب أن نستخدم هذه الأسئلة لتقريب الرؤية:\",\n    \"أرى أن الموضوع\
          \ يستحق التخصص.. إليك بعض الأسئلة المحددة للمراجعة:\",\n    \"استفسارك يعطي\
          \ انطباعاً عاماً.. هذه الأسئلة قد تساعد في تحديد المسار:\",\n    \"الموضوع\
          \ الذي طرحته يتطلب تفاصيل.. إليك بعض الأسئلة التي قد تضيء الطريق أثناء البحث:\"\
          \n]\n\nno_kb_ideas = [\n    \"أُقدّر استفسارك، لكنني أحتاج إلى مزيد من التفاصيل\
          \ لمساعدتك بفعالية. هل يمكنك توضيح المزيد؟\",\n    \"شكرًا لتواصلك! هل يمكنك\
          \ توضيح سؤالك أكثر؟\",\n    \"أنا هنا لمساعدتك، لكنني أحتاج إلى مزيد من\
          \ المعلومات لفهم احتياجاتك بشكل أفضل.\",\n    \"أفهم أن لديك سؤالًا، لكن\
          \ هل يمكنك التوضيح أكثر؟\",\n    \"استفسارك مهم بالنسبة لي، وأريد التأكد\
          \ من تقديم أفضل دعم ممكن. هل يمكنك توضيحه أكثر؟\",\n    \"هل يمكنك تزويدي\
          \ بمعلومات إضافية حول سؤالك لأتمكن من مساعدتك بشكل أفضل؟\",\n    \"أنا هنا\
          \ لمساعدتك! المزيد من التفاصيل ستساعدني حقًا في تقديم إجابة أكثر دقة. هل\
          \ يمكنك منحي بعض التفاصيل؟\",\n    \"شكرًا لاستفسارك! هل يمكنك تحديد ما\
          \ تبحث عنه أكثر؟\",\n    \"أريد مساعدتك، لكنني أحتاج إلى فهم أوضح لمشكلتك.\
          \ هل يمكنك تقديم تفاصيل أكثر؟\"\n]\n\n\n\n\ndef main(rephrase_request: str)\
          \ -> str:\n    # Remove all tags and their content\n    cleaned_rephrase_request\
          \ = re.sub(r'<.*?>.*?</.*?>', '', rephrase_request, flags=re.DOTALL)\n \
          \   cleaned_rephrase_request = cleaned_rephrase_request.strip()\n    \n\
          \    # Choose a random phrase from the suggested phrases\n    random_phrase\
          \ = random.choice(suggested_phrases)\n    \n    if cleaned_rephrase_request:\n\
          \        # Create the final result by combining the random phrase and cleaned\
          \ request\n        result = f\"{random_phrase}\\n\\n{cleaned_rephrase_request}\"\
          \n    else:\n        no_kb = random.choice(no_kb_ideas)\n        result\
          \ = no_kb\n\n    return {\n        \"result\": result,\n    }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: تكوين رد على استعلام غامض
        type: code
        variables:
        - value_selector:
          - '1748426676928'
          - result
          variable: rephrase_request
      height: 53
      id: '1748426733711'
      position:
        x: 3306.4315002512394
        y: 827.8318516656984
      positionAbsolute:
        x: 3306.4315002512394
        y: 827.8318516656984
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - '1746016424681'
          - result
        desc: ''
        memory:
          query_prompt_template: '{{#sys.query#}}'
          role_prefix:
            assistant: ''
            user: ''
          window:
            enabled: true
            size: 15
        model:
          completion_params: {}
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: 776c22b5-beb2-4fba-a247-a9feb119884c
          role: system
          text: 'You are Boubyan Bank''s HR assistant for employees. Reply friendly
            and in short to this employee greeting, and also offer help.


            Query: Hello


            Example Reply (Alter it based on the received greeting):


            Hello! 👋

            How can I help you today?


            Query: Thanks for help


            Example Reply (Alter it based on the received greeting):


            You are welcome! If you ever need more help, do not hesitate to contact
            me.'
        - id: e317e5e0-cfa5-41e1-8ac8-b4d183fee45d
          role: user
          text: '{{#context#}}'
        selected: false
        title: Greeting Reply
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1748862713728'
      position:
        x: 3341.7365956408153
        y: -118.09214671935734
      positionAbsolute:
        x: 3341.7365956408153
        y: -118.09214671935734
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        answer: '{{#1748862713728.text#}}'
        desc: ''
        selected: false
        title: Greeting Query Reply
        type: answer
        variables: []
      height: 103
      id: '1748862844056'
      position:
        x: 3645.7365956408153
        y: -118.09214671935734
      positionAbsolute:
        x: 3645.7365956408153
        y: -118.09214671935734
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - '17460179285850'
          - result
        desc: ''
        memory:
          query_prompt_template: '{{#sys.query#}}'
          role_prefix:
            assistant: ''
            user: ''
          window:
            enabled: true
            size: 15
        model:
          completion_params: {}
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: ad4ec588-d98e-4f29-80d9-53c286604db8
          role: system
          text: 'أنت مساعد الموارد البشرية في بنك بوبيان. يُرجى الردّ بلطف واختصار
            على تحية الموظف هذه، وعرض المساعدة.


            استعلام: مرحبًا


            مثال على الرد (غيّره بناءً على التحية الواردة):


            مرحبًا! 👋

            كيف يمكنني مساعدتك اليوم؟


            استعلام: شكرًا لمساعدتك


            مثال على الرد (غيّره بناءً على التحية الواردة):


            على الرحب والسعة! إذا احتجت إلى مزيد من المساعدة، فلا تتردد في التواصل
            معي.'
        selected: false
        title: رد على تحية
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1750326385463'
      position:
        x: 2698.4315002512394
        y: 1295.7867651316903
      positionAbsolute:
        x: 2698.4315002512394
        y: 1295.7867651316903
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        answer: '{{#1750326385463.text#}}'
        desc: ''
        selected: false
        title: رد نهائي على التحية
        type: answer
        variables: []
      height: 103
      id: '1750326565070'
      position:
        x: 3002.4315002512394
        y: 1295.7867651316903
      positionAbsolute:
        x: 3002.4315002512394
        y: 1295.7867651316903
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "import re\n\ndef main(non_hr_related: str) -> str:\n    # Remove all\
          \ tags and their content\n    cleaned_non_hr_related = re.sub(r'<.*?>.*?</.*?>',\
          \ '', non_hr_related, flags=re.DOTALL)\n\n    cleaned_non_hr_related = cleaned_non_hr_related.strip()\n\
          \    cleaned_non_hr_related = str(cleaned_non_hr_related)\n    return {\n\
          \        \"result\": cleaned_non_hr_related,\n    }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: استخراج رد في مجال آخر
        type: code
        variables:
        - value_selector:
          - '17460180006740'
          - text
          variable: non_hr_related
      height: 53
      id: '1750326752884'
      position:
        x: 3076.191039712996
        y: 1098.8838211945929
      positionAbsolute:
        x: 3076.191039712996
        y: 1098.8838211945929
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        context:
          enabled: true
          variable_selector:
          - '1746016424681'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: 39e13cf3-a8c1-4ce2-9a24-840b6c1380e7
          role: system
          text: "You are a professional English language model for generating queries\
            \ similar to the original query in various ways and degrees of similarity.\
            \ When provided with a \"user query,\" follow these steps:\n\nAssess the\
            \ complexity level of the query:\nIf it is direct/simple → Generate only\
            \ two additional queries using just two techniques.\nIf it is complex\
            \ or allows for multiple pathways to answer → Generate 3 to 6 additional\
            \ queries using some/all available techniques.\nHere are some methods\
            \ for generating new queries:\n\nTechnique 1: Expansion with Generated\
            \ Answers\nIdea: Assume a reasonable answer or explanation for the original\
            \ question, then incorporate it into the query to increase accuracy and\
            \ depth.\n\nOriginal Question: “What are the symptoms of diabetes?”\n\
            Assumed Answer: “Diabetes often causes severe thirst, frequent urination,\
            \ and unexplained weight loss.”\nExpanded Query: “What are the symptoms\
            \ of diabetes, such as severe thirst, frequent urination, and unexplained\
            \ weight loss?”\n\nTechnique 2: Expansion with Synonyms and Hypernyms\n\
            Idea: Invoke synonyms (and commonly used translations) or hypernyms from\
            \ lexical databases like WordNet.\n\nOriginal Question: “Popular Ramadan\
            \ dishes”\nSuggested Synonyms: “Food”, “meals”; and Hypernym: “Cuisine”\n\
            Expanded Query: “What are the most famous Ramadan meals (popular dishes)\
            \ in Arabic cuisine?”\n\nTechnique 3: Expansion with Morphological Forms\n\
            Idea: Generate morphological forms (singular/plural, verb/noun) and variations\
            \ to apply spoken and written contexts alike.\n\nOriginal Question: “Drone”\n\
            Morphological Forms and Variations:\n“Unmanned aerial vehicle” (formal)\n\
            “Drone” (colloquial/borrowed)\n“Drones” (plural)\nExpanded Query: “What\
            \ are the uses of drones (unmanned aerial vehicles) in agriculture and\
            \ relief?”\n\nTechnique 4: Pseudo-Relevance Feedback Expansion\nIdea:\
            \ Conduct preliminary research, extract key terms from the top n results,\
            \ then add them to the original query to steer retrieval towards more\
            \ relevant directions.\n\nOriginal Question: “History of Islamic civilization”\n\
            Key Terms from Top Results: “Umayyad Caliphate,” “Abbasid,” “Andalusia”\n\
            Expanded Query: “How did Islamic civilization develop during the Umayyad\
            \ and Abbasid Caliphates, and what was its impact on Andalusia?”\n\nTechnique\
            \ 5: Semantic Similarity Expansion\nIdea: Use embeddings techniques (like\
            \ Word2Vec or BERT) to extract semantically similar words and phrases,\
            \ then incorporate them into the query.\n\nOriginal Question: “Deep learning\
            \ techniques”\nSemantically Similar Words: “Neural networks,” “CNN,” “RNN,”\
            \ “representational learning”\nExpanded Query: “What are the key deep\
            \ learning techniques such as convolutional neural networks (CNN), recurrent\
            \ neural networks (RNN), and representational learning?”\n\nTechnique\
            \ 6: Expansion with Named Entity Resolution and Synonyms\nIdea: Identify\
            \ formal names, abbreviations, and local aliases for entities mentioned\
            \ in the query, and include them in the original query.\n\nOriginal Question:\
            \ “King Abdulaziz University”\nSynonyms and Abbreviations: “KAU,” “Jeddah\
            \ University”\nExpanded Query: “What is the ranking of King Abdulaziz\
            \ University (KAU – Jeddah University) among Arab and global university\
            \ rankings?”\nReturn the results in a JSON object in the exact format\
            \ below:\n\n{\n  \"questions\": [\"original_question\", \"Question 1\"\
            , \"Question 2\", …]\n}\n\nImportant Notes:\n\nAlways place the original\
            \ query as the first item in the list as it is, followed by the generated\
            \ queries in the remaining items.\nAll queries should be in clear, standard\
            \ English where possible.\nDo not add extra fields or characters outside\
            \ the JSON structure as shown above.\nEnsure that you do not replicate\
            \ the same phrasing verbatim within the questions.\nUpon receiving any\
            \ new query, follow the same methodology to generate a similar JSON output.\
            \ Always start by assessing complexity, then provide the outputs in the\
            \ specified structure without any additional commentary outside of the\
            \ JSON."
        - id: 074c85c8-b69e-478a-ae69-aaab00e4b6fb
          role: user
          text: 'User Query: {{#context#}}'
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 1000
        selected: false
        structured_output:
          schema:
            additionalProperties: false
            properties:
              questions:
                items:
                  type: string
                type: array
            required:
            - questions
            type: object
        structured_output_enabled: true
        title: Qs Generator
        type: llm
        variables: []
        vision:
          enabled: false
      height: 120
      id: '1753164124918'
      position:
        x: 4352.6707265843825
        y: 817.7410946565976
      positionAbsolute:
        x: 4352.6707265843825
        y: 817.7410946565976
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "def main(before_definitions: dict):\n    questions = before_definitions.get(\"\
          questions\")\n\n    return {\n        \"questions\": questions\n    }\n"
        code_language: python3
        desc: ''
        outputs:
          questions:
            children: null
            type: array[string]
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 1000
        selected: false
        title: Loop Definitions
        type: code
        variables:
        - value_selector:
          - '1753164124918'
          - structured_output
          value_type: object
          variable: before_definitions
      height: 84
      id: '1753164517093'
      position:
        x: 4652.6707265843825
        y: 817.7410946565976
      positionAbsolute:
        x: 4652.6707265843825
        y: 817.7410946565976
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        error_handle_mode: terminated
        height: 180
        is_parallel: true
        iterator_input_type: array[string]
        iterator_selector:
        - '1753164517093'
        - questions
        output_selector:
        - '1753164896510'
        - result
        output_type: array[object]
        parallel_nums: 10
        selected: false
        start_node_id: 1753164834772start
        title: Iteration
        type: iteration
        width: 692
      height: 180
      id: '1753164834772'
      position:
        x: 5062.6707265843825
        y: 817.7410946565976
      positionAbsolute:
        x: 5062.6707265843825
        y: 817.7410946565976
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 692
      zIndex: 1
    - data:
        desc: ''
        isInIteration: true
        selected: false
        title: ''
        type: iteration-start
      draggable: false
      height: 48
      id: 1753164834772start
      parentId: '1753164834772'
      position:
        x: 24
        y: 68
      positionAbsolute:
        x: 5086.6707265843825
        y: 885.7410946565976
      selectable: false
      sourcePosition: right
      targetPosition: left
      type: custom-iteration-start
      width: 44
      zIndex: 1002
    - data:
        dataset_ids:
        - ifbDUbOQquDF7SXD0GzoPF99XKjyzL/IXtSv6G279+cABkV7lQe2XU7nYAKQ9KaJ
        desc: ''
        isInIteration: true
        isInLoop: false
        iteration_id: '1753164834772'
        multiple_retrieval_config:
          reranking_enable: true
          reranking_mode: reranking_model
          reranking_model:
            model: Qwen/Qwen3-Reranker-0.6B
            provider: langgenius/openai_api_compatible/openai_api_compatible
          top_k: 4
        query_variable_selector:
        - '1753164834772'
        - item
        retrieval_mode: multiple
        selected: false
        title: Knowledge Retrieval 5
        type: knowledge-retrieval
      height: 91
      id: '1753164849960'
      parentId: '1753164834772'
      position:
        x: 128
        y: 68
      positionAbsolute:
        x: 5190.6707265843825
        y: 885.7410946565976
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "def main(retrieved_answers: list) -> dict:\n    # for item in retrieved_answers:\n\
          \    #     content = item.get(\"content\")\n        # if content and len(content)\
          \ > 80000:\n            # Truncate content to a maximum of 80000 characters\n\
          \            # item[\"content\"] = content[:80000]\n    # Return the updated\
          \ list wrapped inside a dictionary\n    return {\n        \"result\": retrieved_answers\n\
          \    }"
        code_language: python3
        desc: ''
        isInIteration: true
        isInLoop: false
        iteration_id: '1753164834772'
        outputs:
          result:
            children: null
            type: array[object]
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 1000
        selected: false
        title: KB results
        type: code
        variables:
        - value_selector:
          - '1753164849960'
          - result
          value_type: array[object]
          variable: retrieved_answers
      height: 84
      id: '1753164896510'
      parentId: '1753164834772'
      position:
        x: 432
        y: 68
      positionAbsolute:
        x: 5494.6707265843825
        y: 885.7410946565976
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
      zIndex: 1002
    - data:
        context:
          enabled: true
          variable_selector:
          - '1745904416023'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: gemma3:27b-it-qat
          provider: langgenius/ollama/ollama
        prompt_template:
        - id: 67e49763-244d-4bf2-b79e-91719e106f27
          role: system
          text: 'أنت نموذج لغة عربي محترف في توليد استعلامات شبيهة للاستعلام الأصلي
            بطرق مختلفة ودرجات تشابه متعددة.

            عند تزويدك بـ«استعلام المستخدم» اتّبع الخطوات التالية:

            قيِّم مستوى تعقيد الاستعلام:

            • إذا كان مباشراً/بسيطاً → ولِّد إستعلامين إضافيين فقط باستخدام تقنيتين
            اثنين فقط.

            • إذا كان مركَّباً أو يحتمل مسارات كثيرة للإجابة → ولِّد من 3 إلى 6 استعلامات
            إضافية باستخدام بعض/كل التقنيات المتاحة.


            إليك طرق توليد استعلامات جديدة:


            التقنية الأولى: التوسيع بالإجابات المولدة

            فكرة التقنية

            – نفترض إجابة أو تفسيرًا معقولًا للسؤال الأصلي، ثم نلاصقه للاستعلام لزيادة
            الدقّة والعمق.

            مثال

            • السؤال الأصلي: “ما هي أعراض مرض السكري؟”

            • إجابة مفترضة: “السكري غالبًا ما يسبب عطشًا شديدًا وتبولًا متكررًا وفقدان
            وزن غير مبرر.”

            • الاستعلام الموسّع:

            “ما هي أعراض مرض السكري، مثل العطش الشديد والتبول المتكرر وفقدان الوزن
            غير المبرر؟”


            التقنية الثانية: التوسيع بالمرادفات والتصانيف الفوقية

            فكرة التقنية

            – استدعاء مرادفات عربية (ومترجمات معتادة) أو تصانيف (فوقيات) من معاجم
            مثل Arabic WordNet.

            مثال

            • السؤال الأصلي: “أطباق رمضانية شعبية”

            • المرادفات المقترحة: “أكلات”، “مأكولات”؛ والتصنيف الفوقي: “المطبخ العربي”

            • الاستعلام الموسّع:

            “ما هي أشهر الأكلات الرمضانية (المأكولات الشعبية) في المطبخ العربي؟”


            التقنية الثالثة: التوسيع بالأشكال الصرفية والوقفية

            فكرة التقنية

            – توليد الأشكال الصرفية (مفرد/جمع، فعل/مصدر) واختلافات التشكيل والوقف
            لإسقاط النصوص المنطوقة والمكتوبة على حدٍّ سواء.

            مثال

            • السؤال الأصلي: “طائرة بدون طيار”

            • الأشكال الصرفية والتشكيلية:

            – “طائِرة بدون طيّار” (بالتشكيل)

            – “الدرون” (العامية المقتبسة)

            – “الطائرات المسيّرة” (جمع)

            • الاستعلام الموسّع:

            “ما هي استخدامات الطائرة بدون طيار (الدرون) أو الطائرات المسيّرة في الزراعة
            والإغاثة؟”


            التقنية الرابعة: التوسيع بالتغذية الراجعة الوهمية (Pseudo-Relevance Feedback)

            فكرة التقنية

            – نجري بحثًا أوليًا، نأخذ أهم المصطلحات من أعلى n نتائج، ثم نضيفها للاستعلام
            الأصلي لثني الاسترجاع في الاتجاهات الأكثر دلالة.

            مثال

            • السؤال الأصلي: “تاريخ الحضارة الإسلامية”

            • أهم المصطلحات الواردة في النتائج الأولى: “الخلافة الأموية”، “العباسية”،
            “الأندلس”

            • الاستعلام الموسّع:

            “كيف تطورت الحضارة الإسلامية في عصر الخلافة الأموية والعباسية، وما أثرها
            في الأندلس؟”


            التقنية الخامسة: التوسيع بالتشابه الدلالي (Semantic Embedding)

            فكرة التقنية

            – نستخدم طريقة عمل النماذج المشفرة (مثل Word2Vec أو BERT) لاستخراج الكلمات
            والعبارات المتقاربة دلاليًا، ثم ندرجها في الاستعلام.

            مثال

            • السؤال الأصلي: “تقنيات التعلم العميق”

            • الكلمات المتقاربة دلاليًا: “الشبكات العصبية”، “CNN”، “RNN”، “التعلم
            التمثيلي”

            • الاستعلام الموسّع:

            “ما هي أبرز تقنيات التعلم العميق مثل الشبكات العصبية التلافيفية (CNN)
            والمتكررة (RNN) والتعلم التمثيلي؟”


            التقنية السادسة: التوسيع بحلّ الكيانات المسماة والمرادفات الخاصة بها

            فكرة التقنية

            – نعثر على الأسماء الرسمية والاختصارات والاسماء المحلية (aliases) للكيانات
            الواردة في الاستعلام، ونضمّها للاستعلام الأصلي.

            مثال

            • السؤال الأصلي: “جامعة الملك عبدالعزيز”

            • المرادفات والاختصارات: “KAU”، “جامعة جدة”

            • الاستعلام الموسّع:

            “ما ترتيب جامعة الملك عبدالعزيز (KAU – جامعة جدة) ضمن تصنيفات الجامعات
            العربية والعالمية؟”


            أعد النتائج في كائن JSON بالصيغة الدقيقة التالية:

            {

            "questions": ["السؤال الأصلي", "سؤال 1", "سؤال 2", …]

            }


            ملاحظات مهمّة:

            • دائماً ضع الاستعلام الأصلي كأول عنصر في القائمة كما هو، ثم الاستعلامات
            المولدة في باقي العناصر.

            • جميع الاستعلامات يجب أن تكون بالعربية الفصحى ما أمكن.

            • لا تضف حقولاً أو أحرفاً زائدة خارج بنية JSON الظاهرة أعلاه.

            • احرص على ألا تكرّر نفس الصياغة حرفياً داخل questions.


            عند استلام أي استعلام جديد، اتّبع نفس المنهجية لتوليد JSON مماثل.

            ابدأ دائماً بتقييم التعقيد، ثم قدّم المخرجات بالبنية المحدّدة دون أي تعليق
            إضافي خارج JSON.'
        - role: user
          text: 'استعلام المستخدم:

            {{#context#}}'
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 1000
        selected: false
        structured_output:
          schema:
            additionalProperties: false
            properties:
              questions:
                items:
                  type: string
                type: array
            required:
            - questions
            type: object
        structured_output_enabled: true
        title: مولد الاستعلامات
        type: llm
        variables: []
        vision:
          enabled: false
      height: 118
      id: '1753246466644'
      position:
        x: 4760.305468014791
        y: 405.5788614466998
      positionAbsolute:
        x: 4760.305468014791
        y: 405.5788614466998
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        code: "def main(before_definitions: dict):\n    questions = before_definitions.get(\"\
          questions\")\n\n    return {\n        \"questions\": questions\n    }\n"
        code_language: python3
        desc: ''
        outputs:
          questions:
            children: null
            type: array[string]
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 1000
        selected: false
        title: تعريفات ضرورية
        type: code
        variables:
        - value_selector:
          - '1753246466644'
          - structured_output
          value_type: object
          variable: before_definitions
      height: 82
      id: '1753246634130'
      position:
        x: 5060.305468014791
        y: 405.5788614466998
      positionAbsolute:
        x: 5060.305468014791
        y: 405.5788614466998
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
    - data:
        desc: ''
        error_handle_mode: terminated
        height: 208
        is_parallel: true
        iterator_input_type: array[string]
        iterator_selector:
        - '1753246634130'
        - questions
        output_selector:
        - '1753246784428'
        - result
        output_type: array[object]
        parallel_nums: 10
        selected: false
        start_node_id: 1753246681375start
        title: Iteration 2
        type: iteration
        width: 630
      height: 208
      id: '1753246681375'
      position:
        x: 5392.305468014791
        y: 405.5788614466998
      positionAbsolute:
        x: 5392.305468014791
        y: 405.5788614466998
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 630
      zIndex: 1
    - data:
        desc: ''
        isInIteration: true
        selected: false
        title: ''
        type: iteration-start
      draggable: false
      height: 48
      id: 1753246681375start
      parentId: '1753246681375'
      position:
        x: 24
        y: 68
      positionAbsolute:
        x: 5416.305468014791
        y: 473.5788614466998
      selectable: false
      sourcePosition: right
      targetPosition: left
      type: custom-iteration-start
      width: 44
      zIndex: 1002
    - data:
        dataset_ids:
        - C16mAxpeLxPUQBmiJDW3cUkbVHZc2Wc4FG/o9zzPgwFMavMfLcU4MMAcBXWueL4Q
        desc: ''
        isInIteration: true
        isInLoop: false
        iteration_id: '1753246681375'
        multiple_retrieval_config:
          reranking_enable: true
          reranking_mode: reranking_model
          reranking_model:
            model: Qwen/Qwen3-Reranker-0.6B
            provider: langgenius/openai_api_compatible/openai_api_compatible
          top_k: 4
        query_variable_selector:
        - '1753246681375'
        - item
        retrieval_mode: multiple
        selected: false
        title: قاعدة البيانات
        type: knowledge-retrieval
      height: 91
      id: '1753246692249'
      parentId: '1753246681375'
      position:
        x: 66
        y: 68
      positionAbsolute:
        x: 5458.305468014791
        y: 473.5788614466998
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    - data:
        code: "def main(retrieved_answers: list) -> dict:\n    # for item in retrieved_answers:\n\
          \    #     content = item.get(\"content\")\n        # if content and len(content)\
          \ > 80000:\n            # Truncate content to a maximum of 80000 characters\n\
          \            # item[\"content\"] = content[:80000]\n    # Return the updated\
          \ list wrapped inside a dictionary\n    return {\n        \"result\": retrieved_answers\n\
          \    }"
        code_language: python3
        desc: ''
        isInIteration: true
        isInLoop: false
        iteration_id: '1753246681375'
        outputs:
          result:
            children: null
            type: array[object]
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 1000
        selected: false
        title: نتائج قاعدة البيانات
        type: code
        variables:
        - value_selector:
          - '1753246692249'
          - result
          value_type: array[object]
          variable: retrieved_answers
      height: 82
      id: '1753246784428'
      parentId: '1753246681375'
      position:
        x: 370
        y: 68
      positionAbsolute:
        x: 5762.305468014791
        y: 473.5788614466998
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 243
      zIndex: 1002
    viewport:
      x: -1938.8477718734775
      y: 91.84654345746105
      zoom: 0.25
